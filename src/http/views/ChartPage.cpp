//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "src/http/views/ChartPage.hpp"
#include <algorithm>
#include <deque>
#include <drogon/utils/OStringStream.h>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>
using namespace drogon;
std::string ChartPage::genText(const DrTemplateData &ChartPage_view_data)
{
    drogon::OStringStream ChartPage_tmp_stream;
    std::string layoutName { "" };
    ChartPage_tmp_stream << "<head>\n";
    ChartPage_tmp_stream << "	<meta charset=\"UTF-8\">\n";
    ChartPage_tmp_stream << "	<title>Hello</title>\n";
    ChartPage_tmp_stream << "	<link rel=\"shortcut icon\" href=\"E:/Code/CppTide/src/http/views/static/favicon.ico\">\n";
    ChartPage_tmp_stream << "	<link rel=\"stylesheet\" href=\"E:/Code/CppTide/src/http/views/static/bootstrap/bootstrap@4.6.min.css\">\n";
    ChartPage_tmp_stream << "	<link rel=\"stylesheet\" href=\"E:/Code/CppTide/src/http/views/static/css/init.css\">\n";
    ChartPage_tmp_stream << "	<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script> <!--导入jQuery-->\n";
    ChartPage_tmp_stream << "	<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.min.js\"></script> <!--导入jQuery-->\n";
    ChartPage_tmp_stream << "\n";
    ChartPage_tmp_stream << "</head>\n";
    ChartPage_tmp_stream << "\n";
    ChartPage_tmp_stream << "<body>\n";
    ChartPage_tmp_stream << "	<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n";
    ChartPage_tmp_stream << "		<div class=\"container\">\n";
    ChartPage_tmp_stream << "			<a class=\"navbar-brand\" href=\"HomePage.html\">智能巡逻船控制后台</a>\n";
    ChartPage_tmp_stream << "			<button class=\"navbar-toggler collapsed\" type=\"button\" data-toggle=\"collapse\"\n";
    ChartPage_tmp_stream << "				data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\"\n";
    ChartPage_tmp_stream << "				aria-label=\"Toggle navigation\">\n";
    ChartPage_tmp_stream << "				<span class=\"navbar-toggler-icon\"></span>\n";
    ChartPage_tmp_stream << "			</button>\n";
    ChartPage_tmp_stream << "			<div class=\"navbar-collapse collapse show\" id=\"navbarSupportedContent\" style>\n";
    ChartPage_tmp_stream << "				<ul class=\"navbar-nav mr-auto\">\n";
    ChartPage_tmp_stream << "					<li class=\"nav-item active\">\n";
    ChartPage_tmp_stream << "						<a class=\"nav-link\" href=\"HomePage.html\">首页 <span class=\"sr-only\">(current)</span></a>\n";
    ChartPage_tmp_stream << "					</li>\n";
    ChartPage_tmp_stream << "					<li class=\"nav-item\">\n";
    ChartPage_tmp_stream << "						<a class=\"nav-link\" href=\"CameraPage.html\">视频显示</a>\n";
    ChartPage_tmp_stream << "					</li>\n";
    ChartPage_tmp_stream << "					<li class=\"nav-item\">\n";
    ChartPage_tmp_stream << "						<a class=\"nav-link\" href=\"MapPage.html\">地图显示</a>\n";
    ChartPage_tmp_stream << "					</li>\n";
    ChartPage_tmp_stream << "					<li class=\"nav-item\">\n";
    ChartPage_tmp_stream << "						<a class=\"nav-link\" href=\"ChartPage.html\">水质数据显示</a>\n";
    ChartPage_tmp_stream << "					</li>\n";
    ChartPage_tmp_stream << "				</ul>\n";
    ChartPage_tmp_stream << "				<ul class=\"navbar-nav\">\n";
    ChartPage_tmp_stream << "					<li class=\"nav-item\">\n";
    ChartPage_tmp_stream << "						<span class=\"nav-link\">Hello World</span>\n";
    ChartPage_tmp_stream << "					</li>\n";
    ChartPage_tmp_stream << "					<li class=\"nav-item\">\n";
    ChartPage_tmp_stream << "						<a class=\"nav-link\" href=\"#\">退出登录</a>\n";
    ChartPage_tmp_stream << "					</li>\n";
    ChartPage_tmp_stream << "					<li class=\"nav-item\">\n";
    ChartPage_tmp_stream << "						<a class=\"nav-link\" href=\"LoginPage.html\">登录</a>\n";
    ChartPage_tmp_stream << "					</li>\n";
    ChartPage_tmp_stream << "					<li class=\"nav-item\">\n";
    ChartPage_tmp_stream << "						<a class=\"nav-link\" href=\"RegisterPage.html\">注册</a>\n";
    ChartPage_tmp_stream << "					</li>\n";
    ChartPage_tmp_stream << "				</ul>\n";
    ChartPage_tmp_stream << "			</div>\n";
    ChartPage_tmp_stream << "		</div>\n";
    ChartPage_tmp_stream << "	</nav>\n";
    ChartPage_tmp_stream << "\n";
    ChartPage_tmp_stream << "	<div class=\"container\"></div>\n";
    ChartPage_tmp_stream << "\n";
    ChartPage_tmp_stream << "\n";
    ChartPage_tmp_stream << "	<h1 class=\"row mt-4\">浊度传感器数据</h1>\n";
    ChartPage_tmp_stream << "	<!-- 第一个图表 -->\n";
    ChartPage_tmp_stream << "	<canvas id=\"first\" height=\"330px\" width=\"900px\"></canvas> <!--折线图位置-->\n";
    ChartPage_tmp_stream << "	<h1 class=\"row mt-4\">温度传感器数据</h1>\n";
    ChartPage_tmp_stream << "	<!-- 第二个图表 -->\n";
    ChartPage_tmp_stream << "	<canvas id=\"second\" height=\"330px\" width=\"900px\"></canvas> <!--折线图位置-->\n";
    ChartPage_tmp_stream << "	<script>\n";
    ChartPage_tmp_stream << "		$(function () {\n";
    ChartPage_tmp_stream << "			var can_first = $('#first').get(0).getContext('2d'); /*绘制类型*/\n";
    ChartPage_tmp_stream << "			//定义图标的数据\n";
    ChartPage_tmp_stream << "			var canData_first = {\n";
    ChartPage_tmp_stream << "				labels: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"], /*初始x轴数据*/\n";
    ChartPage_tmp_stream << "				datasets: [\n";
    ChartPage_tmp_stream << "					{\n";
    ChartPage_tmp_stream << "						//折线的填充颜色\n";
    ChartPage_tmp_stream << "						fillColor: \"rgba(255,255,255,0.1)\",\n";
    ChartPage_tmp_stream << "						//线条颜色：\n";
    ChartPage_tmp_stream << "						strokeColor: \"rgb(255,117,37)\",\n";
    ChartPage_tmp_stream << "						//y轴初始数据：\n";
    ChartPage_tmp_stream << "						data: [1, 3, 2, 1, 5, 4, 3, 1, 6, 9, 20, 3]\n";
    ChartPage_tmp_stream << "					}\n";
    ChartPage_tmp_stream << "				]\n";
    ChartPage_tmp_stream << "			};\n";
    ChartPage_tmp_stream << "			//绘制图片\n";
    ChartPage_tmp_stream << "			var line = new Chart(can_first).Line(canData_first);\n";
    ChartPage_tmp_stream << "			var first = setInterval(function () {  //设置定时器\n";
    ChartPage_tmp_stream << "				$.ajax(\n";
    ChartPage_tmp_stream << "					{\n";
    ChartPage_tmp_stream << "						url: \"/setData\", //从setData函数中获取数据\n";
    ChartPage_tmp_stream << "						type: \"get\",\n";
    ChartPage_tmp_stream << "						data: \"\",\n";
    ChartPage_tmp_stream << "						success: function (data) {\n";
    ChartPage_tmp_stream << "							line.addData(\n";
    ChartPage_tmp_stream << "								[data[\"data\"]], //y轴，因为同一个x轴可以有多个折线\n";
    ChartPage_tmp_stream << "								data[\"time\"]  //x轴\n";
    ChartPage_tmp_stream << "							);\n";
    ChartPage_tmp_stream << "							//保持x轴只有8个数据，要不随着时间推移x轴会越来越长\n";
    ChartPage_tmp_stream << "							var len = line.datasets[0].points.length;\n";
    ChartPage_tmp_stream << "							if (len > 12) {\n";
    ChartPage_tmp_stream << "								line.removeData()\n";
    ChartPage_tmp_stream << "							}\n";
    ChartPage_tmp_stream << "						}\n";
    ChartPage_tmp_stream << "					}\n";
    ChartPage_tmp_stream << "				)\n";
    ChartPage_tmp_stream << "			}, 800)\n";
    ChartPage_tmp_stream << "		})\n";
    ChartPage_tmp_stream << "\n";
    ChartPage_tmp_stream << "\n";
    ChartPage_tmp_stream << "\n";
    ChartPage_tmp_stream << "		$(function () {\n";
    ChartPage_tmp_stream << "			var can_second = $('#second').get(0).getContext('2d'); /*绘制类型*/\n";
    ChartPage_tmp_stream << "			//定义图标的数据\n";
    ChartPage_tmp_stream << "			var canData_second = {\n";
    ChartPage_tmp_stream << "				labels: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"], /*初始x轴数据*/\n";
    ChartPage_tmp_stream << "				datasets: [\n";
    ChartPage_tmp_stream << "					{\n";
    ChartPage_tmp_stream << "						//折线的填充颜色\n";
    ChartPage_tmp_stream << "						fillColor: \"rgba(255,255,255,0.1)\",\n";
    ChartPage_tmp_stream << "						//线条颜色：\n";
    ChartPage_tmp_stream << "						strokeColor: \"rgb(134,139,255)\",\n";
    ChartPage_tmp_stream << "						//y轴初始数据：\n";
    ChartPage_tmp_stream << "						data: [1, 3, 2, 1, 5, 4, 3, 1, 6, 9, 20, 3]\n";
    ChartPage_tmp_stream << "					}\n";
    ChartPage_tmp_stream << "				]\n";
    ChartPage_tmp_stream << "			};\n";
    ChartPage_tmp_stream << "			//绘制图片\n";
    ChartPage_tmp_stream << "			var line = new Chart(can_second).Line(canData_second);\n";
    ChartPage_tmp_stream << "			var first = setInterval(function () {  //设置定时器\n";
    ChartPage_tmp_stream << "				$.ajax(\n";
    ChartPage_tmp_stream << "					{\n";
    ChartPage_tmp_stream << "						url: \"/setData1\", //从setData函数中获取数据\n";
    ChartPage_tmp_stream << "						type: \"get\",\n";
    ChartPage_tmp_stream << "						data: \"\",\n";
    ChartPage_tmp_stream << "						success: function (data) {\n";
    ChartPage_tmp_stream << "							line.addData(\n";
    ChartPage_tmp_stream << "								[data[\"data\"]], //y轴，因为同一个x轴可以有多个折线\n";
    ChartPage_tmp_stream << "								data[\"time\"]  //x轴\n";
    ChartPage_tmp_stream << "							);\n";
    ChartPage_tmp_stream << "							//保持x轴只有8个数据，要不随着时间推移x轴会越来越长\n";
    ChartPage_tmp_stream << "							var len = line.datasets[0].points.length;\n";
    ChartPage_tmp_stream << "							if (len > 12) {\n";
    ChartPage_tmp_stream << "								line.removeData()\n";
    ChartPage_tmp_stream << "							}\n";
    ChartPage_tmp_stream << "						}\n";
    ChartPage_tmp_stream << "					}\n";
    ChartPage_tmp_stream << "				)\n";
    ChartPage_tmp_stream << "			}, 800)\n";
    ChartPage_tmp_stream << "		})\n";
    ChartPage_tmp_stream << "	</script>\n";
    ChartPage_tmp_stream << "\n";
    ChartPage_tmp_stream << "</body>\n";
    ChartPage_tmp_stream << "\n";
    ChartPage_tmp_stream << "</html>\n";
    if (layoutName.empty()) {
        std::string ret { std::move(ChartPage_tmp_stream.str()) };
        return ret;
    } else {
        auto templ = DrTemplateBase::newTemplate(layoutName);
        if (!templ) return "";
        HttpViewData data = ChartPage_view_data;
        auto str          = std::move(ChartPage_tmp_stream.str());
        if (!str.empty() && str[str.length() - 1] == '\n') str.resize(str.length() - 1);
        data[""] = std::move(str);
        return templ->genText(data);
    }
}
