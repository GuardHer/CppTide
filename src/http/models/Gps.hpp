/**
 *
 *  Gps.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace ship
{

class Gps
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _sj;
        static const std::string _wgs84_lng;
        static const std::string _wgs84_lat;
        static const std::string _gcj02_lng;
        static const std::string _gcj02_lat;
        static const std::string _bd09_lng;
        static const std::string _bd09_lat;
        static const std::string _gps_qual;
        static const std::string _num_sats;
        static const std::string _horizontal_dil;
        static const std::string _altitude;
        static const std::string _create_time;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = int32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Gps(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Gps(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Gps(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Gps() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const int32_t &pId) noexcept;

    /**  For column sj  */
    ///Get the value of the column sj, returns the default value if the column is null
    const std::string &getValueOfSj() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSj() const noexcept;
    ///Set the value of the column sj
    void setSj(const std::string &pSj) noexcept;
    void setSj(std::string &&pSj) noexcept;
    void setSjToNull() noexcept;

    /**  For column wgs84_lng  */
    ///Get the value of the column wgs84_lng, returns the default value if the column is null
    const std::string &getValueOfWgs84Lng() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getWgs84Lng() const noexcept;
    ///Set the value of the column wgs84_lng
    void setWgs84Lng(const std::string &pWgs84Lng) noexcept;
    void setWgs84Lng(std::string &&pWgs84Lng) noexcept;
    void setWgs84LngToNull() noexcept;

    /**  For column wgs84_lat  */
    ///Get the value of the column wgs84_lat, returns the default value if the column is null
    const std::string &getValueOfWgs84Lat() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getWgs84Lat() const noexcept;
    ///Set the value of the column wgs84_lat
    void setWgs84Lat(const std::string &pWgs84Lat) noexcept;
    void setWgs84Lat(std::string &&pWgs84Lat) noexcept;
    void setWgs84LatToNull() noexcept;

    /**  For column gcj02_lng  */
    ///Get the value of the column gcj02_lng, returns the default value if the column is null
    const std::string &getValueOfGcj02Lng() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getGcj02Lng() const noexcept;
    ///Set the value of the column gcj02_lng
    void setGcj02Lng(const std::string &pGcj02Lng) noexcept;
    void setGcj02Lng(std::string &&pGcj02Lng) noexcept;
    void setGcj02LngToNull() noexcept;

    /**  For column gcj02_lat  */
    ///Get the value of the column gcj02_lat, returns the default value if the column is null
    const std::string &getValueOfGcj02Lat() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getGcj02Lat() const noexcept;
    ///Set the value of the column gcj02_lat
    void setGcj02Lat(const std::string &pGcj02Lat) noexcept;
    void setGcj02Lat(std::string &&pGcj02Lat) noexcept;
    void setGcj02LatToNull() noexcept;

    /**  For column bd09_lng  */
    ///Get the value of the column bd09_lng, returns the default value if the column is null
    const std::string &getValueOfBd09Lng() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBd09Lng() const noexcept;
    ///Set the value of the column bd09_lng
    void setBd09Lng(const std::string &pBd09Lng) noexcept;
    void setBd09Lng(std::string &&pBd09Lng) noexcept;
    void setBd09LngToNull() noexcept;

    /**  For column bd09_lat  */
    ///Get the value of the column bd09_lat, returns the default value if the column is null
    const std::string &getValueOfBd09Lat() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBd09Lat() const noexcept;
    ///Set the value of the column bd09_lat
    void setBd09Lat(const std::string &pBd09Lat) noexcept;
    void setBd09Lat(std::string &&pBd09Lat) noexcept;
    void setBd09LatToNull() noexcept;

    /**  For column gps_qual  */
    ///Get the value of the column gps_qual, returns the default value if the column is null
    const std::string &getValueOfGpsQual() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getGpsQual() const noexcept;
    ///Set the value of the column gps_qual
    void setGpsQual(const std::string &pGpsQual) noexcept;
    void setGpsQual(std::string &&pGpsQual) noexcept;
    void setGpsQualToNull() noexcept;

    /**  For column num_sats  */
    ///Get the value of the column num_sats, returns the default value if the column is null
    const std::string &getValueOfNumSats() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getNumSats() const noexcept;
    ///Set the value of the column num_sats
    void setNumSats(const std::string &pNumSats) noexcept;
    void setNumSats(std::string &&pNumSats) noexcept;
    void setNumSatsToNull() noexcept;

    /**  For column horizontal_dil  */
    ///Get the value of the column horizontal_dil, returns the default value if the column is null
    const std::string &getValueOfHorizontalDil() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getHorizontalDil() const noexcept;
    ///Set the value of the column horizontal_dil
    void setHorizontalDil(const std::string &pHorizontalDil) noexcept;
    void setHorizontalDil(std::string &&pHorizontalDil) noexcept;
    void setHorizontalDilToNull() noexcept;

    /**  For column altitude  */
    ///Get the value of the column altitude, returns the default value if the column is null
    const std::string &getValueOfAltitude() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAltitude() const noexcept;
    ///Set the value of the column altitude
    void setAltitude(const std::string &pAltitude) noexcept;
    void setAltitude(std::string &&pAltitude) noexcept;
    void setAltitudeToNull() noexcept;

    /**  For column create_time  */
    ///Get the value of the column create_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreateTime() const noexcept;
    ///Set the value of the column create_time
    void setCreateTime(const ::trantor::Date &pCreateTime) noexcept;
    void setCreateTimeToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 13;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Gps>;
    friend drogon::orm::BaseBuilder<Gps, true, true>;
    friend drogon::orm::BaseBuilder<Gps, true, false>;
    friend drogon::orm::BaseBuilder<Gps, false, true>;
    friend drogon::orm::BaseBuilder<Gps, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Gps>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> id_;
    std::shared_ptr<std::string> sj_;
    std::shared_ptr<std::string> wgs84Lng_;
    std::shared_ptr<std::string> wgs84Lat_;
    std::shared_ptr<std::string> gcj02Lng_;
    std::shared_ptr<std::string> gcj02Lat_;
    std::shared_ptr<std::string> bd09Lng_;
    std::shared_ptr<std::string> bd09Lat_;
    std::shared_ptr<std::string> gpsQual_;
    std::shared_ptr<std::string> numSats_;
    std::shared_ptr<std::string> horizontalDil_;
    std::shared_ptr<std::string> altitude_;
    std::shared_ptr<::trantor::Date> createTime_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[13]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "sj,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "wgs84_lng,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "wgs84_lat,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "gcj02_lng,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "gcj02_lat,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "bd09_lng,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "bd09_lat,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "gps_qual,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "num_sats,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "horizontal_dil,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "altitude,";
            ++parametersCount;
        }
        sql += "create_time,";
        ++parametersCount;
        if(!dirtyFlag_[12])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace ship
} // namespace drogon_model
