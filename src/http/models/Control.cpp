/**
 *
 *  Control.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "src/http/models/Control.hpp"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::ship;

const std::string Control::Cols::_id = "id";
const std::string Control::Cols::_state = "state";
const std::string Control::Cols::_LeftMotor = "LeftMotor";
const std::string Control::Cols::_RightMotor = "RightMotor";
const std::string Control::Cols::_UpServo = "UpServo";
const std::string Control::Cols::_DownServo = "DownServo";
const std::string Control::Cols::_Light = "Light";
const std::string Control::Cols::_Pump = "Pump";
const std::string Control::Cols::_create_time = "create_time";
const std::string Control::Cols::_Oxygen_Pump = "Oxygen_Pump";
const std::string Control::Cols::_Feeding = "Feeding";
const std::string Control::primaryKeyName = "id";
const bool Control::hasPrimaryKey = true;
const std::string Control::tableName = "control";

const std::vector<typename Control::MetaData> Control::metaData_ = {
	{"id", "int32_t", "int", 4, 1, 1, 1},
	{"state", "int32_t", "int", 4, 0, 0, 0},
	{"LeftMotor", "int32_t", "int", 4, 0, 0, 0},
	{"RightMotor", "int32_t", "int", 4, 0, 0, 0},
	{"UpServo", "int32_t", "int", 4, 0, 0, 0},
	{"DownServo", "int32_t", "int", 4, 0, 0, 0},
	{"Light", "int32_t", "int", 4, 0, 0, 0},
	{"Pump", "int32_t", "int", 4, 0, 0, 0},
	{"create_time", "::trantor::Date", "timestamp", 0, 0, 0, 0},
	{"Oxygen_Pump", "int32_t", "int", 4, 0, 0, 0},
	{"Feeding", "int32_t", "int", 4, 0, 0, 0}};
const std::string &Control::getColumnName(size_t index) noexcept(false)
{
	assert(index < metaData_.size());
	return metaData_[index].colName_;
}
Control::Control(const Row &r, const ssize_t indexOffset) noexcept
{
	if (indexOffset < 0)
	{
		if (!r["id"].isNull())
		{
			id_ = std::make_shared<int32_t>(r["id"].as<int32_t>());
		}
		if (!r["state"].isNull())
		{
			state_ = std::make_shared<int32_t>(r["state"].as<int32_t>());
		}
		if (!r["LeftMotor"].isNull())
		{
			leftmotor_ = std::make_shared<int32_t>(r["LeftMotor"].as<int32_t>());
		}
		if (!r["RightMotor"].isNull())
		{
			rightmotor_ = std::make_shared<int32_t>(r["RightMotor"].as<int32_t>());
		}
		if (!r["UpServo"].isNull())
		{
			upservo_ = std::make_shared<int32_t>(r["UpServo"].as<int32_t>());
		}
		if (!r["DownServo"].isNull())
		{
			downservo_ = std::make_shared<int32_t>(r["DownServo"].as<int32_t>());
		}
		if (!r["Light"].isNull())
		{
			light_ = std::make_shared<int32_t>(r["Light"].as<int32_t>());
		}
		if (!r["Pump"].isNull())
		{
			pump_ = std::make_shared<int32_t>(r["Pump"].as<int32_t>());
		}
		if (!r["create_time"].isNull())
		{
			auto timeStr = r["create_time"].as<std::string>();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
		if (!r["Oxygen_Pump"].isNull())
		{
			oxygenPump_ = std::make_shared<int32_t>(r["Oxygen_Pump"].as<int32_t>());
		}
		if (!r["Feeding"].isNull())
		{
			feeding_ = std::make_shared<int32_t>(r["Feeding"].as<int32_t>());
		}
	}
	else
	{
		size_t offset = (size_t)indexOffset;
		if (offset + 11 > r.size())
		{
			LOG_FATAL << "Invalid SQL result for this model";
			return;
		}
		size_t index;
		index = offset + 0;
		if (!r[index].isNull())
		{
			id_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 1;
		if (!r[index].isNull())
		{
			state_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 2;
		if (!r[index].isNull())
		{
			leftmotor_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 3;
		if (!r[index].isNull())
		{
			rightmotor_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 4;
		if (!r[index].isNull())
		{
			upservo_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 5;
		if (!r[index].isNull())
		{
			downservo_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 6;
		if (!r[index].isNull())
		{
			light_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 7;
		if (!r[index].isNull())
		{
			pump_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 8;
		if (!r[index].isNull())
		{
			auto timeStr = r[index].as<std::string>();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
		index = offset + 9;
		if (!r[index].isNull())
		{
			oxygenPump_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 10;
		if (!r[index].isNull())
		{
			feeding_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
	}
}

Control::Control(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
	if (pMasqueradingVector.size() != 11)
	{
		LOG_ERROR << "Bad masquerading vector";
		return;
	}
	if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
	{
		dirtyFlag_[0] = true;
		if (!pJson[pMasqueradingVector[0]].isNull())
		{
			id_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
		}
	}
	if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
	{
		dirtyFlag_[1] = true;
		if (!pJson[pMasqueradingVector[1]].isNull())
		{
			state_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
		}
	}
	if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
	{
		dirtyFlag_[2] = true;
		if (!pJson[pMasqueradingVector[2]].isNull())
		{
			leftmotor_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
		}
	}
	if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
	{
		dirtyFlag_[3] = true;
		if (!pJson[pMasqueradingVector[3]].isNull())
		{
			rightmotor_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
		}
	}
	if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
	{
		dirtyFlag_[4] = true;
		if (!pJson[pMasqueradingVector[4]].isNull())
		{
			upservo_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
		}
	}
	if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
	{
		dirtyFlag_[5] = true;
		if (!pJson[pMasqueradingVector[5]].isNull())
		{
			downservo_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
		}
	}
	if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
	{
		dirtyFlag_[6] = true;
		if (!pJson[pMasqueradingVector[6]].isNull())
		{
			light_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
		}
	}
	if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
	{
		dirtyFlag_[7] = true;
		if (!pJson[pMasqueradingVector[7]].isNull())
		{
			pump_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
		}
	}
	if (!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
	{
		dirtyFlag_[8] = true;
		if (!pJson[pMasqueradingVector[8]].isNull())
		{
			auto timeStr = pJson[pMasqueradingVector[8]].asString();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
	if (!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
	{
		dirtyFlag_[9] = true;
		if (!pJson[pMasqueradingVector[9]].isNull())
		{
			oxygenPump_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
		}
	}
	if (!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
	{
		dirtyFlag_[10] = true;
		if (!pJson[pMasqueradingVector[10]].isNull())
		{
			feeding_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[10]].asInt64());
		}
	}
}

Control::Control(const Json::Value &pJson) noexcept(false)
{
	if (pJson.isMember("id"))
	{
		dirtyFlag_[0] = true;
		if (!pJson["id"].isNull())
		{
			id_ = std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
		}
	}
	if (pJson.isMember("state"))
	{
		dirtyFlag_[1] = true;
		if (!pJson["state"].isNull())
		{
			state_ = std::make_shared<int32_t>((int32_t)pJson["state"].asInt64());
		}
	}
	if (pJson.isMember("LeftMotor"))
	{
		dirtyFlag_[2] = true;
		if (!pJson["LeftMotor"].isNull())
		{
			leftmotor_ = std::make_shared<int32_t>((int32_t)pJson["LeftMotor"].asInt64());
		}
	}
	if (pJson.isMember("RightMotor"))
	{
		dirtyFlag_[3] = true;
		if (!pJson["RightMotor"].isNull())
		{
			rightmotor_ = std::make_shared<int32_t>((int32_t)pJson["RightMotor"].asInt64());
		}
	}
	if (pJson.isMember("UpServo"))
	{
		dirtyFlag_[4] = true;
		if (!pJson["UpServo"].isNull())
		{
			upservo_ = std::make_shared<int32_t>((int32_t)pJson["UpServo"].asInt64());
		}
	}
	if (pJson.isMember("DownServo"))
	{
		dirtyFlag_[5] = true;
		if (!pJson["DownServo"].isNull())
		{
			downservo_ = std::make_shared<int32_t>((int32_t)pJson["DownServo"].asInt64());
		}
	}
	if (pJson.isMember("Light"))
	{
		dirtyFlag_[6] = true;
		if (!pJson["Light"].isNull())
		{
			light_ = std::make_shared<int32_t>((int32_t)pJson["Light"].asInt64());
		}
	}
	if (pJson.isMember("Pump"))
	{
		dirtyFlag_[7] = true;
		if (!pJson["Pump"].isNull())
		{
			pump_ = std::make_shared<int32_t>((int32_t)pJson["Pump"].asInt64());
		}
	}
	if (pJson.isMember("create_time"))
	{
		dirtyFlag_[8] = true;
		if (!pJson["create_time"].isNull())
		{
			auto timeStr = pJson["create_time"].asString();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
	if (pJson.isMember("Oxygen_Pump"))
	{
		dirtyFlag_[9] = true;
		if (!pJson["Oxygen_Pump"].isNull())
		{
			oxygenPump_ = std::make_shared<int32_t>((int32_t)pJson["Oxygen_Pump"].asInt64());
		}
	}
	if (pJson.isMember("Feeding"))
	{
		dirtyFlag_[10] = true;
		if (!pJson["Feeding"].isNull())
		{
			feeding_ = std::make_shared<int32_t>((int32_t)pJson["Feeding"].asInt64());
		}
	}
}

void Control::updateByMasqueradedJson(const Json::Value &pJson,
									  const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
	if (pMasqueradingVector.size() != 11)
	{
		LOG_ERROR << "Bad masquerading vector";
		return;
	}
	if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
	{
		if (!pJson[pMasqueradingVector[0]].isNull())
		{
			id_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
		}
	}
	if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
	{
		dirtyFlag_[1] = true;
		if (!pJson[pMasqueradingVector[1]].isNull())
		{
			state_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
		}
	}
	if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
	{
		dirtyFlag_[2] = true;
		if (!pJson[pMasqueradingVector[2]].isNull())
		{
			leftmotor_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
		}
	}
	if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
	{
		dirtyFlag_[3] = true;
		if (!pJson[pMasqueradingVector[3]].isNull())
		{
			rightmotor_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
		}
	}
	if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
	{
		dirtyFlag_[4] = true;
		if (!pJson[pMasqueradingVector[4]].isNull())
		{
			upservo_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
		}
	}
	if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
	{
		dirtyFlag_[5] = true;
		if (!pJson[pMasqueradingVector[5]].isNull())
		{
			downservo_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
		}
	}
	if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
	{
		dirtyFlag_[6] = true;
		if (!pJson[pMasqueradingVector[6]].isNull())
		{
			light_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
		}
	}
	if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
	{
		dirtyFlag_[7] = true;
		if (!pJson[pMasqueradingVector[7]].isNull())
		{
			pump_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
		}
	}
	if (!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
	{
		dirtyFlag_[8] = true;
		if (!pJson[pMasqueradingVector[8]].isNull())
		{
			auto timeStr = pJson[pMasqueradingVector[8]].asString();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
	if (!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
	{
		dirtyFlag_[9] = true;
		if (!pJson[pMasqueradingVector[9]].isNull())
		{
			oxygenPump_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
		}
	}
	if (!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
	{
		dirtyFlag_[10] = true;
		if (!pJson[pMasqueradingVector[10]].isNull())
		{
			feeding_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[10]].asInt64());
		}
	}
}

void Control::updateByJson(const Json::Value &pJson) noexcept(false)
{
	if (pJson.isMember("id"))
	{
		if (!pJson["id"].isNull())
		{
			id_ = std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
		}
	}
	if (pJson.isMember("state"))
	{
		dirtyFlag_[1] = true;
		if (!pJson["state"].isNull())
		{
			state_ = std::make_shared<int32_t>((int32_t)pJson["state"].asInt64());
		}
	}
	if (pJson.isMember("LeftMotor"))
	{
		dirtyFlag_[2] = true;
		if (!pJson["LeftMotor"].isNull())
		{
			leftmotor_ = std::make_shared<int32_t>((int32_t)pJson["LeftMotor"].asInt64());
		}
	}
	if (pJson.isMember("RightMotor"))
	{
		dirtyFlag_[3] = true;
		if (!pJson["RightMotor"].isNull())
		{
			rightmotor_ = std::make_shared<int32_t>((int32_t)pJson["RightMotor"].asInt64());
		}
	}
	if (pJson.isMember("UpServo"))
	{
		dirtyFlag_[4] = true;
		if (!pJson["UpServo"].isNull())
		{
			upservo_ = std::make_shared<int32_t>((int32_t)pJson["UpServo"].asInt64());
		}
	}
	if (pJson.isMember("DownServo"))
	{
		dirtyFlag_[5] = true;
		if (!pJson["DownServo"].isNull())
		{
			downservo_ = std::make_shared<int32_t>((int32_t)pJson["DownServo"].asInt64());
		}
	}
	if (pJson.isMember("Light"))
	{
		dirtyFlag_[6] = true;
		if (!pJson["Light"].isNull())
		{
			light_ = std::make_shared<int32_t>((int32_t)pJson["Light"].asInt64());
		}
	}
	if (pJson.isMember("Pump"))
	{
		dirtyFlag_[7] = true;
		if (!pJson["Pump"].isNull())
		{
			pump_ = std::make_shared<int32_t>((int32_t)pJson["Pump"].asInt64());
		}
	}
	if (pJson.isMember("create_time"))
	{
		dirtyFlag_[8] = true;
		if (!pJson["create_time"].isNull())
		{
			auto timeStr = pJson["create_time"].asString();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
	if (pJson.isMember("Oxygen_Pump"))
	{
		dirtyFlag_[9] = true;
		if (!pJson["Oxygen_Pump"].isNull())
		{
			oxygenPump_ = std::make_shared<int32_t>((int32_t)pJson["Oxygen_Pump"].asInt64());
		}
	}
	if (pJson.isMember("Feeding"))
	{
		dirtyFlag_[10] = true;
		if (!pJson["Feeding"].isNull())
		{
			feeding_ = std::make_shared<int32_t>((int32_t)pJson["Feeding"].asInt64());
		}
	}
}

const int32_t &Control::getValueOfId() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (id_)
		return *id_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &Control::getId() const noexcept
{
	return id_;
}
void Control::setId(const int32_t &pId) noexcept
{
	id_ = std::make_shared<int32_t>(pId);
	dirtyFlag_[0] = true;
}
const typename Control::PrimaryKeyType &Control::getPrimaryKey() const
{
	assert(id_);
	return *id_;
}

const int32_t &Control::getValueOfState() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (state_)
		return *state_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &Control::getState() const noexcept
{
	return state_;
}
void Control::setState(const int32_t &pState) noexcept
{
	state_ = std::make_shared<int32_t>(pState);
	dirtyFlag_[1] = true;
}
void Control::setStateToNull() noexcept
{
	state_.reset();
	dirtyFlag_[1] = true;
}

const int32_t &Control::getValueOfLeftmotor() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (leftmotor_)
		return *leftmotor_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &Control::getLeftmotor() const noexcept
{
	return leftmotor_;
}
void Control::setLeftmotor(const int32_t &pLeftmotor) noexcept
{
	leftmotor_ = std::make_shared<int32_t>(pLeftmotor);
	dirtyFlag_[2] = true;
}
void Control::setLeftmotorToNull() noexcept
{
	leftmotor_.reset();
	dirtyFlag_[2] = true;
}

const int32_t &Control::getValueOfRightmotor() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (rightmotor_)
		return *rightmotor_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &Control::getRightmotor() const noexcept
{
	return rightmotor_;
}
void Control::setRightmotor(const int32_t &pRightmotor) noexcept
{
	rightmotor_ = std::make_shared<int32_t>(pRightmotor);
	dirtyFlag_[3] = true;
}
void Control::setRightmotorToNull() noexcept
{
	rightmotor_.reset();
	dirtyFlag_[3] = true;
}

const int32_t &Control::getValueOfUpservo() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (upservo_)
		return *upservo_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &Control::getUpservo() const noexcept
{
	return upservo_;
}
void Control::setUpservo(const int32_t &pUpservo) noexcept
{
	upservo_ = std::make_shared<int32_t>(pUpservo);
	dirtyFlag_[4] = true;
}
void Control::setUpservoToNull() noexcept
{
	upservo_.reset();
	dirtyFlag_[4] = true;
}

const int32_t &Control::getValueOfDownservo() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (downservo_)
		return *downservo_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &Control::getDownservo() const noexcept
{
	return downservo_;
}
void Control::setDownservo(const int32_t &pDownservo) noexcept
{
	downservo_ = std::make_shared<int32_t>(pDownservo);
	dirtyFlag_[5] = true;
}
void Control::setDownservoToNull() noexcept
{
	downservo_.reset();
	dirtyFlag_[5] = true;
}

const int32_t &Control::getValueOfLight() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (light_)
		return *light_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &Control::getLight() const noexcept
{
	return light_;
}
void Control::setLight(const int32_t &pLight) noexcept
{
	light_ = std::make_shared<int32_t>(pLight);
	dirtyFlag_[6] = true;
}
void Control::setLightToNull() noexcept
{
	light_.reset();
	dirtyFlag_[6] = true;
}

const int32_t &Control::getValueOfPump() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (pump_)
		return *pump_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &Control::getPump() const noexcept
{
	return pump_;
}
void Control::setPump(const int32_t &pPump) noexcept
{
	pump_ = std::make_shared<int32_t>(pPump);
	dirtyFlag_[7] = true;
}
void Control::setPumpToNull() noexcept
{
	pump_.reset();
	dirtyFlag_[7] = true;
}

const ::trantor::Date &Control::getValueOfCreateTime() const noexcept
{
	static const ::trantor::Date defaultValue = ::trantor::Date();
	if (createTime_)
		return *createTime_;
	return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Control::getCreateTime() const noexcept
{
	return createTime_;
}
void Control::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
	createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
	dirtyFlag_[8] = true;
}
void Control::setCreateTimeToNull() noexcept
{
	createTime_.reset();
	dirtyFlag_[8] = true;
}

const int32_t &Control::getValueOfOxygenPump() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (oxygenPump_)
		return *oxygenPump_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &Control::getOxygenPump() const noexcept
{
	return oxygenPump_;
}
void Control::setOxygenPump(const int32_t &pOxygenPump) noexcept
{
	oxygenPump_ = std::make_shared<int32_t>(pOxygenPump);
	dirtyFlag_[9] = true;
}
void Control::setOxygenPumpToNull() noexcept
{
	oxygenPump_.reset();
	dirtyFlag_[9] = true;
}

const int32_t &Control::getValueOfFeeding() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (feeding_)
		return *feeding_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &Control::getFeeding() const noexcept
{
	return feeding_;
}
void Control::setFeeding(const int32_t &pFeeding) noexcept
{
	feeding_ = std::make_shared<int32_t>(pFeeding);
	dirtyFlag_[10] = true;
}
void Control::setFeedingToNull() noexcept
{
	feeding_.reset();
	dirtyFlag_[10] = true;
}

void Control::updateId(const uint64_t id)
{
	id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &Control::insertColumns() noexcept
{
	static const std::vector<std::string> inCols = {
		"state",
		"LeftMotor",
		"RightMotor",
		"UpServo",
		"DownServo",
		"Light",
		"Pump",
		"create_time",
		"Oxygen_Pump",
		"Feeding"};
	return inCols;
}

void Control::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
	if (dirtyFlag_[1])
	{
		if (getState())
		{
			binder << getValueOfState();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[2])
	{
		if (getLeftmotor())
		{
			binder << getValueOfLeftmotor();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[3])
	{
		if (getRightmotor())
		{
			binder << getValueOfRightmotor();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[4])
	{
		if (getUpservo())
		{
			binder << getValueOfUpservo();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[5])
	{
		if (getDownservo())
		{
			binder << getValueOfDownservo();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[6])
	{
		if (getLight())
		{
			binder << getValueOfLight();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[7])
	{
		if (getPump())
		{
			binder << getValueOfPump();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[8])
	{
		if (getCreateTime())
		{
			binder << getValueOfCreateTime();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[9])
	{
		if (getOxygenPump())
		{
			binder << getValueOfOxygenPump();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[10])
	{
		if (getFeeding())
		{
			binder << getValueOfFeeding();
		}
		else
		{
			binder << nullptr;
		}
	}
}

const std::vector<std::string> Control::updateColumns() const
{
	std::vector<std::string> ret;
	if (dirtyFlag_[1])
	{
		ret.push_back(getColumnName(1));
	}
	if (dirtyFlag_[2])
	{
		ret.push_back(getColumnName(2));
	}
	if (dirtyFlag_[3])
	{
		ret.push_back(getColumnName(3));
	}
	if (dirtyFlag_[4])
	{
		ret.push_back(getColumnName(4));
	}
	if (dirtyFlag_[5])
	{
		ret.push_back(getColumnName(5));
	}
	if (dirtyFlag_[6])
	{
		ret.push_back(getColumnName(6));
	}
	if (dirtyFlag_[7])
	{
		ret.push_back(getColumnName(7));
	}
	if (dirtyFlag_[8])
	{
		ret.push_back(getColumnName(8));
	}
	if (dirtyFlag_[9])
	{
		ret.push_back(getColumnName(9));
	}
	if (dirtyFlag_[10])
	{
		ret.push_back(getColumnName(10));
	}
	return ret;
}

void Control::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
	if (dirtyFlag_[1])
	{
		if (getState())
		{
			binder << getValueOfState();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[2])
	{
		if (getLeftmotor())
		{
			binder << getValueOfLeftmotor();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[3])
	{
		if (getRightmotor())
		{
			binder << getValueOfRightmotor();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[4])
	{
		if (getUpservo())
		{
			binder << getValueOfUpservo();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[5])
	{
		if (getDownservo())
		{
			binder << getValueOfDownservo();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[6])
	{
		if (getLight())
		{
			binder << getValueOfLight();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[7])
	{
		if (getPump())
		{
			binder << getValueOfPump();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[8])
	{
		if (getCreateTime())
		{
			binder << getValueOfCreateTime();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[9])
	{
		if (getOxygenPump())
		{
			binder << getValueOfOxygenPump();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[10])
	{
		if (getFeeding())
		{
			binder << getValueOfFeeding();
		}
		else
		{
			binder << nullptr;
		}
	}
}
Json::Value Control::toJson() const
{
	Json::Value ret;
	if (getId())
	{
		ret["id"] = getValueOfId();
	}
	else
	{
		ret["id"] = Json::Value();
	}
	if (getState())
	{
		ret["state"] = getValueOfState();
	}
	else
	{
		ret["state"] = Json::Value();
	}
	if (getLeftmotor())
	{
		ret["LeftMotor"] = getValueOfLeftmotor();
	}
	else
	{
		ret["LeftMotor"] = Json::Value();
	}
	if (getRightmotor())
	{
		ret["RightMotor"] = getValueOfRightmotor();
	}
	else
	{
		ret["RightMotor"] = Json::Value();
	}
	if (getUpservo())
	{
		ret["UpServo"] = getValueOfUpservo();
	}
	else
	{
		ret["UpServo"] = Json::Value();
	}
	if (getDownservo())
	{
		ret["DownServo"] = getValueOfDownservo();
	}
	else
	{
		ret["DownServo"] = Json::Value();
	}
	if (getLight())
	{
		ret["Light"] = getValueOfLight();
	}
	else
	{
		ret["Light"] = Json::Value();
	}
	if (getPump())
	{
		ret["Pump"] = getValueOfPump();
	}
	else
	{
		ret["Pump"] = Json::Value();
	}
	if (getCreateTime())
	{
		ret["create_time"] = getCreateTime()->toDbStringLocal();
	}
	else
	{
		ret["create_time"] = Json::Value();
	}
	if (getOxygenPump())
	{
		ret["Oxygen_Pump"] = getValueOfOxygenPump();
	}
	else
	{
		ret["Oxygen_Pump"] = Json::Value();
	}
	if (getFeeding())
	{
		ret["Feeding"] = getValueOfFeeding();
	}
	else
	{
		ret["Feeding"] = Json::Value();
	}
	return ret;
}

Json::Value Control::toMasqueradedJson(
	const std::vector<std::string> &pMasqueradingVector) const
{
	Json::Value ret;
	if (pMasqueradingVector.size() == 11)
	{
		if (!pMasqueradingVector[0].empty())
		{
			if (getId())
			{
				ret[pMasqueradingVector[0]] = getValueOfId();
			}
			else
			{
				ret[pMasqueradingVector[0]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[1].empty())
		{
			if (getState())
			{
				ret[pMasqueradingVector[1]] = getValueOfState();
			}
			else
			{
				ret[pMasqueradingVector[1]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[2].empty())
		{
			if (getLeftmotor())
			{
				ret[pMasqueradingVector[2]] = getValueOfLeftmotor();
			}
			else
			{
				ret[pMasqueradingVector[2]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[3].empty())
		{
			if (getRightmotor())
			{
				ret[pMasqueradingVector[3]] = getValueOfRightmotor();
			}
			else
			{
				ret[pMasqueradingVector[3]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[4].empty())
		{
			if (getUpservo())
			{
				ret[pMasqueradingVector[4]] = getValueOfUpservo();
			}
			else
			{
				ret[pMasqueradingVector[4]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[5].empty())
		{
			if (getDownservo())
			{
				ret[pMasqueradingVector[5]] = getValueOfDownservo();
			}
			else
			{
				ret[pMasqueradingVector[5]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[6].empty())
		{
			if (getLight())
			{
				ret[pMasqueradingVector[6]] = getValueOfLight();
			}
			else
			{
				ret[pMasqueradingVector[6]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[7].empty())
		{
			if (getPump())
			{
				ret[pMasqueradingVector[7]] = getValueOfPump();
			}
			else
			{
				ret[pMasqueradingVector[7]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[8].empty())
		{
			if (getCreateTime())
			{
				ret[pMasqueradingVector[8]] = getCreateTime()->toDbStringLocal();
			}
			else
			{
				ret[pMasqueradingVector[8]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[9].empty())
		{
			if (getOxygenPump())
			{
				ret[pMasqueradingVector[9]] = getValueOfOxygenPump();
			}
			else
			{
				ret[pMasqueradingVector[9]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[10].empty())
		{
			if (getFeeding())
			{
				ret[pMasqueradingVector[10]] = getValueOfFeeding();
			}
			else
			{
				ret[pMasqueradingVector[10]] = Json::Value();
			}
		}
		return ret;
	}
	LOG_ERROR << "Masquerade failed";
	if (getId())
	{
		ret["id"] = getValueOfId();
	}
	else
	{
		ret["id"] = Json::Value();
	}
	if (getState())
	{
		ret["state"] = getValueOfState();
	}
	else
	{
		ret["state"] = Json::Value();
	}
	if (getLeftmotor())
	{
		ret["LeftMotor"] = getValueOfLeftmotor();
	}
	else
	{
		ret["LeftMotor"] = Json::Value();
	}
	if (getRightmotor())
	{
		ret["RightMotor"] = getValueOfRightmotor();
	}
	else
	{
		ret["RightMotor"] = Json::Value();
	}
	if (getUpservo())
	{
		ret["UpServo"] = getValueOfUpservo();
	}
	else
	{
		ret["UpServo"] = Json::Value();
	}
	if (getDownservo())
	{
		ret["DownServo"] = getValueOfDownservo();
	}
	else
	{
		ret["DownServo"] = Json::Value();
	}
	if (getLight())
	{
		ret["Light"] = getValueOfLight();
	}
	else
	{
		ret["Light"] = Json::Value();
	}
	if (getPump())
	{
		ret["Pump"] = getValueOfPump();
	}
	else
	{
		ret["Pump"] = Json::Value();
	}
	if (getCreateTime())
	{
		ret["create_time"] = getCreateTime()->toDbStringLocal();
	}
	else
	{
		ret["create_time"] = Json::Value();
	}
	if (getOxygenPump())
	{
		ret["Oxygen_Pump"] = getValueOfOxygenPump();
	}
	else
	{
		ret["Oxygen_Pump"] = Json::Value();
	}
	if (getFeeding())
	{
		ret["Feeding"] = getValueOfFeeding();
	}
	else
	{
		ret["Feeding"] = Json::Value();
	}
	return ret;
}

bool Control::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
	if (pJson.isMember("id"))
	{
		if (!validJsonOfField(0, "id", pJson["id"], err, true))
			return false;
	}
	if (pJson.isMember("state"))
	{
		if (!validJsonOfField(1, "state", pJson["state"], err, true))
			return false;
	}
	if (pJson.isMember("LeftMotor"))
	{
		if (!validJsonOfField(2, "LeftMotor", pJson["LeftMotor"], err, true))
			return false;
	}
	if (pJson.isMember("RightMotor"))
	{
		if (!validJsonOfField(3, "RightMotor", pJson["RightMotor"], err, true))
			return false;
	}
	if (pJson.isMember("UpServo"))
	{
		if (!validJsonOfField(4, "UpServo", pJson["UpServo"], err, true))
			return false;
	}
	if (pJson.isMember("DownServo"))
	{
		if (!validJsonOfField(5, "DownServo", pJson["DownServo"], err, true))
			return false;
	}
	if (pJson.isMember("Light"))
	{
		if (!validJsonOfField(6, "Light", pJson["Light"], err, true))
			return false;
	}
	if (pJson.isMember("Pump"))
	{
		if (!validJsonOfField(7, "Pump", pJson["Pump"], err, true))
			return false;
	}
	if (pJson.isMember("create_time"))
	{
		if (!validJsonOfField(8, "create_time", pJson["create_time"], err, true))
			return false;
	}
	if (pJson.isMember("Oxygen_Pump"))
	{
		if (!validJsonOfField(9, "Oxygen_Pump", pJson["Oxygen_Pump"], err, true))
			return false;
	}
	if (pJson.isMember("Feeding"))
	{
		if (!validJsonOfField(10, "Feeding", pJson["Feeding"], err, true))
			return false;
	}
	return true;
}
bool Control::validateMasqueradedJsonForCreation(const Json::Value &pJson,
												 const std::vector<std::string> &pMasqueradingVector,
												 std::string &err)
{
	if (pMasqueradingVector.size() != 11)
	{
		err = "Bad masquerading vector";
		return false;
	}
	try
	{
		if (!pMasqueradingVector[0].empty())
		{
			if (pJson.isMember(pMasqueradingVector[0]))
			{
				if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[1].empty())
		{
			if (pJson.isMember(pMasqueradingVector[1]))
			{
				if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[2].empty())
		{
			if (pJson.isMember(pMasqueradingVector[2]))
			{
				if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[3].empty())
		{
			if (pJson.isMember(pMasqueradingVector[3]))
			{
				if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[4].empty())
		{
			if (pJson.isMember(pMasqueradingVector[4]))
			{
				if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[5].empty())
		{
			if (pJson.isMember(pMasqueradingVector[5]))
			{
				if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[6].empty())
		{
			if (pJson.isMember(pMasqueradingVector[6]))
			{
				if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[7].empty())
		{
			if (pJson.isMember(pMasqueradingVector[7]))
			{
				if (!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[8].empty())
		{
			if (pJson.isMember(pMasqueradingVector[8]))
			{
				if (!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[9].empty())
		{
			if (pJson.isMember(pMasqueradingVector[9]))
			{
				if (!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[10].empty())
		{
			if (pJson.isMember(pMasqueradingVector[10]))
			{
				if (!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
					return false;
			}
		}
	}
	catch (const Json::LogicError &e)
	{
		err = e.what();
		return false;
	}
	return true;
}
bool Control::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
	if (pJson.isMember("id"))
	{
		if (!validJsonOfField(0, "id", pJson["id"], err, false))
			return false;
	}
	else
	{
		err = "The value of primary key must be set in the json object for update";
		return false;
	}
	if (pJson.isMember("state"))
	{
		if (!validJsonOfField(1, "state", pJson["state"], err, false))
			return false;
	}
	if (pJson.isMember("LeftMotor"))
	{
		if (!validJsonOfField(2, "LeftMotor", pJson["LeftMotor"], err, false))
			return false;
	}
	if (pJson.isMember("RightMotor"))
	{
		if (!validJsonOfField(3, "RightMotor", pJson["RightMotor"], err, false))
			return false;
	}
	if (pJson.isMember("UpServo"))
	{
		if (!validJsonOfField(4, "UpServo", pJson["UpServo"], err, false))
			return false;
	}
	if (pJson.isMember("DownServo"))
	{
		if (!validJsonOfField(5, "DownServo", pJson["DownServo"], err, false))
			return false;
	}
	if (pJson.isMember("Light"))
	{
		if (!validJsonOfField(6, "Light", pJson["Light"], err, false))
			return false;
	}
	if (pJson.isMember("Pump"))
	{
		if (!validJsonOfField(7, "Pump", pJson["Pump"], err, false))
			return false;
	}
	if (pJson.isMember("create_time"))
	{
		if (!validJsonOfField(8, "create_time", pJson["create_time"], err, false))
			return false;
	}
	if (pJson.isMember("Oxygen_Pump"))
	{
		if (!validJsonOfField(9, "Oxygen_Pump", pJson["Oxygen_Pump"], err, false))
			return false;
	}
	if (pJson.isMember("Feeding"))
	{
		if (!validJsonOfField(10, "Feeding", pJson["Feeding"], err, false))
			return false;
	}
	return true;
}
bool Control::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
											   const std::vector<std::string> &pMasqueradingVector,
											   std::string &err)
{
	if (pMasqueradingVector.size() != 11)
	{
		err = "Bad masquerading vector";
		return false;
	}
	try
	{
		if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
		{
			if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
				return false;
		}
		else
		{
			err = "The value of primary key must be set in the json object for update";
			return false;
		}
		if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
		{
			if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
				return false;
		}
		if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
		{
			if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
				return false;
		}
		if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
		{
			if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
				return false;
		}
		if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
		{
			if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
				return false;
		}
		if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
		{
			if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
				return false;
		}
		if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
		{
			if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
				return false;
		}
		if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
		{
			if (!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
				return false;
		}
		if (!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
		{
			if (!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
				return false;
		}
		if (!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
		{
			if (!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
				return false;
		}
		if (!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
		{
			if (!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
				return false;
		}
	}
	catch (const Json::LogicError &e)
	{
		err = e.what();
		return false;
	}
	return true;
}
bool Control::validJsonOfField(size_t index,
							   const std::string &fieldName,
							   const Json::Value &pJson,
							   std::string &err,
							   bool isForCreation)
{
	switch (index)
	{
	case 0:
		if (pJson.isNull())
		{
			err = "The " + fieldName + " column cannot be null";
			return false;
		}
		if (isForCreation)
		{
			err = "The automatic primary key cannot be set";
			return false;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 1:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 2:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 3:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 4:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 5:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 6:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 7:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 8:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isString())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 9:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 10:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	default:
		err = "Internal error in the server";
		return false;
	}
	return true;
}
