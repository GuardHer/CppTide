/**
 *
 *  Sensor.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "src/http/models/Sensor.hpp"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::ship;

const std::string Sensor::Cols::_id = "id";
const std::string Sensor::Cols::_Temperature = "Temperature";
const std::string Sensor::Cols::_TU_Value = "TU_Value";
const std::string Sensor::Cols::_create_time = "create_time";
const std::string Sensor::Cols::_Oxygen = "Oxygen";
const std::string Sensor::Cols::_DO = "DO";
const std::string Sensor::primaryKeyName = "id";
const bool Sensor::hasPrimaryKey = true;
const std::string Sensor::tableName = "sensor";

const std::vector<typename Sensor::MetaData> Sensor::metaData_ = {
	{"id", "int32_t", "int", 4, 1, 1, 1},
	{"Temperature", "float", "float", 4, 0, 0, 0},
	{"TU_Value", "float", "float", 4, 0, 0, 0},
	{"create_time", "::trantor::Date", "timestamp", 0, 0, 0, 0},
	{"Oxygen", "float", "float", 4, 0, 0, 0},
	{"DO", "float", "float", 4, 0, 0, 0}};
const std::string &Sensor::getColumnName(size_t index) noexcept(false)
{
	assert(index < metaData_.size());
	return metaData_[index].colName_;
}
Sensor::Sensor(const Row &r, const ssize_t indexOffset) noexcept
{
	if (indexOffset < 0)
	{
		if (!r["id"].isNull())
		{
			id_ = std::make_shared<int32_t>(r["id"].as<int32_t>());
		}
		if (!r["Temperature"].isNull())
		{
			temperature_ = std::make_shared<float>(r["Temperature"].as<float>());
		}
		if (!r["TU_Value"].isNull())
		{
			tuValue_ = std::make_shared<float>(r["TU_Value"].as<float>());
		}
		if (!r["create_time"].isNull())
		{
			auto timeStr = r["create_time"].as<std::string>();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
		if (!r["Oxygen"].isNull())
		{
			oxygen_ = std::make_shared<float>(r["Oxygen"].as<float>());
		}
		if (!r["DO"].isNull())
		{
			do_ = std::make_shared<float>(r["DO"].as<float>());
		}
	}
	else
	{
		size_t offset = (size_t)indexOffset;
		if (offset + 6 > r.size())
		{
			LOG_FATAL << "Invalid SQL result for this model";
			return;
		}
		size_t index;
		index = offset + 0;
		if (!r[index].isNull())
		{
			id_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 1;
		if (!r[index].isNull())
		{
			temperature_ = std::make_shared<float>(r[index].as<float>());
		}
		index = offset + 2;
		if (!r[index].isNull())
		{
			tuValue_ = std::make_shared<float>(r[index].as<float>());
		}
		index = offset + 3;
		if (!r[index].isNull())
		{
			auto timeStr = r[index].as<std::string>();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
		index = offset + 4;
		if (!r[index].isNull())
		{
			oxygen_ = std::make_shared<float>(r[index].as<float>());
		}
		index = offset + 5;
		if (!r[index].isNull())
		{
			do_ = std::make_shared<float>(r[index].as<float>());
		}
	}
}

Sensor::Sensor(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
	if (pMasqueradingVector.size() != 6)
	{
		LOG_ERROR << "Bad masquerading vector";
		return;
	}
	if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
	{
		dirtyFlag_[0] = true;
		if (!pJson[pMasqueradingVector[0]].isNull())
		{
			id_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
		}
	}
	if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
	{
		dirtyFlag_[1] = true;
		if (!pJson[pMasqueradingVector[1]].isNull())
		{
			temperature_ = std::make_shared<float>(pJson[pMasqueradingVector[1]].asFloat());
		}
	}
	if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
	{
		dirtyFlag_[2] = true;
		if (!pJson[pMasqueradingVector[2]].isNull())
		{
			tuValue_ = std::make_shared<float>(pJson[pMasqueradingVector[2]].asFloat());
		}
	}
	if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
	{
		dirtyFlag_[3] = true;
		if (!pJson[pMasqueradingVector[3]].isNull())
		{
			auto timeStr = pJson[pMasqueradingVector[3]].asString();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
	if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
	{
		dirtyFlag_[4] = true;
		if (!pJson[pMasqueradingVector[4]].isNull())
		{
			oxygen_ = std::make_shared<float>(pJson[pMasqueradingVector[4]].asFloat());
		}
	}
	if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
	{
		dirtyFlag_[5] = true;
		if (!pJson[pMasqueradingVector[5]].isNull())
		{
			do_ = std::make_shared<float>(pJson[pMasqueradingVector[5]].asFloat());
		}
	}
}

Sensor::Sensor(const Json::Value &pJson) noexcept(false)
{
	if (pJson.isMember("id"))
	{
		dirtyFlag_[0] = true;
		if (!pJson["id"].isNull())
		{
			id_ = std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
		}
	}
	if (pJson.isMember("Temperature"))
	{
		dirtyFlag_[1] = true;
		if (!pJson["Temperature"].isNull())
		{
			temperature_ = std::make_shared<float>(pJson["Temperature"].asFloat());
		}
	}
	if (pJson.isMember("TU_Value"))
	{
		dirtyFlag_[2] = true;
		if (!pJson["TU_Value"].isNull())
		{
			tuValue_ = std::make_shared<float>(pJson["TU_Value"].asFloat());
		}
	}
	if (pJson.isMember("create_time"))
	{
		dirtyFlag_[3] = true;
		if (!pJson["create_time"].isNull())
		{
			auto timeStr = pJson["create_time"].asString();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
	if (pJson.isMember("Oxygen"))
	{
		dirtyFlag_[4] = true;
		if (!pJson["Oxygen"].isNull())
		{
			oxygen_ = std::make_shared<float>(pJson["Oxygen"].asFloat());
		}
	}
	if (pJson.isMember("DO"))
	{
		dirtyFlag_[5] = true;
		if (!pJson["DO"].isNull())
		{
			do_ = std::make_shared<float>(pJson["DO"].asFloat());
		}
	}
}

void Sensor::updateByMasqueradedJson(const Json::Value &pJson,
									 const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
	if (pMasqueradingVector.size() != 6)
	{
		LOG_ERROR << "Bad masquerading vector";
		return;
	}
	if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
	{
		if (!pJson[pMasqueradingVector[0]].isNull())
		{
			id_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
		}
	}
	if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
	{
		dirtyFlag_[1] = true;
		if (!pJson[pMasqueradingVector[1]].isNull())
		{
			temperature_ = std::make_shared<float>(pJson[pMasqueradingVector[1]].asFloat());
		}
	}
	if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
	{
		dirtyFlag_[2] = true;
		if (!pJson[pMasqueradingVector[2]].isNull())
		{
			tuValue_ = std::make_shared<float>(pJson[pMasqueradingVector[2]].asFloat());
		}
	}
	if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
	{
		dirtyFlag_[3] = true;
		if (!pJson[pMasqueradingVector[3]].isNull())
		{
			auto timeStr = pJson[pMasqueradingVector[3]].asString();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
	if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
	{
		dirtyFlag_[4] = true;
		if (!pJson[pMasqueradingVector[4]].isNull())
		{
			oxygen_ = std::make_shared<float>(pJson[pMasqueradingVector[4]].asFloat());
		}
	}
	if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
	{
		dirtyFlag_[5] = true;
		if (!pJson[pMasqueradingVector[5]].isNull())
		{
			do_ = std::make_shared<float>(pJson[pMasqueradingVector[5]].asFloat());
		}
	}
}

void Sensor::updateByJson(const Json::Value &pJson) noexcept(false)
{
	if (pJson.isMember("id"))
	{
		if (!pJson["id"].isNull())
		{
			id_ = std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
		}
	}
	if (pJson.isMember("Temperature"))
	{
		dirtyFlag_[1] = true;
		if (!pJson["Temperature"].isNull())
		{
			temperature_ = std::make_shared<float>(pJson["Temperature"].asFloat());
		}
	}
	if (pJson.isMember("TU_Value"))
	{
		dirtyFlag_[2] = true;
		if (!pJson["TU_Value"].isNull())
		{
			tuValue_ = std::make_shared<float>(pJson["TU_Value"].asFloat());
		}
	}
	if (pJson.isMember("create_time"))
	{
		dirtyFlag_[3] = true;
		if (!pJson["create_time"].isNull())
		{
			auto timeStr = pJson["create_time"].asString();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
	if (pJson.isMember("Oxygen"))
	{
		dirtyFlag_[4] = true;
		if (!pJson["Oxygen"].isNull())
		{
			oxygen_ = std::make_shared<float>(pJson["Oxygen"].asFloat());
		}
	}
	if (pJson.isMember("DO"))
	{
		dirtyFlag_[5] = true;
		if (!pJson["DO"].isNull())
		{
			do_ = std::make_shared<float>(pJson["DO"].asFloat());
		}
	}
}

const int32_t &Sensor::getValueOfId() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (id_)
		return *id_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &Sensor::getId() const noexcept
{
	return id_;
}
void Sensor::setId(const int32_t &pId) noexcept
{
	id_ = std::make_shared<int32_t>(pId);
	dirtyFlag_[0] = true;
}
const typename Sensor::PrimaryKeyType &Sensor::getPrimaryKey() const
{
	assert(id_);
	return *id_;
}

const float &Sensor::getValueOfTemperature() const noexcept
{
	static const float defaultValue = float();
	if (temperature_)
		return *temperature_;
	return defaultValue;
}
const std::shared_ptr<float> &Sensor::getTemperature() const noexcept
{
	return temperature_;
}
void Sensor::setTemperature(const float &pTemperature) noexcept
{
	temperature_ = std::make_shared<float>(pTemperature);
	dirtyFlag_[1] = true;
}
void Sensor::setTemperatureToNull() noexcept
{
	temperature_.reset();
	dirtyFlag_[1] = true;
}

const float &Sensor::getValueOfTuValue() const noexcept
{
	static const float defaultValue = float();
	if (tuValue_)
		return *tuValue_;
	return defaultValue;
}
const std::shared_ptr<float> &Sensor::getTuValue() const noexcept
{
	return tuValue_;
}
void Sensor::setTuValue(const float &pTuValue) noexcept
{
	tuValue_ = std::make_shared<float>(pTuValue);
	dirtyFlag_[2] = true;
}
void Sensor::setTuValueToNull() noexcept
{
	tuValue_.reset();
	dirtyFlag_[2] = true;
}

const ::trantor::Date &Sensor::getValueOfCreateTime() const noexcept
{
	static const ::trantor::Date defaultValue = ::trantor::Date();
	if (createTime_)
		return *createTime_;
	return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Sensor::getCreateTime() const noexcept
{
	return createTime_;
}
void Sensor::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
	createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
	dirtyFlag_[3] = true;
}
void Sensor::setCreateTimeToNull() noexcept
{
	createTime_.reset();
	dirtyFlag_[3] = true;
}

const float &Sensor::getValueOfOxygen() const noexcept
{
	static const float defaultValue = float();
	if (oxygen_)
		return *oxygen_;
	return defaultValue;
}
const std::shared_ptr<float> &Sensor::getOxygen() const noexcept
{
	return oxygen_;
}
void Sensor::setOxygen(const float &pOxygen) noexcept
{
	oxygen_ = std::make_shared<float>(pOxygen);
	dirtyFlag_[4] = true;
}
void Sensor::setOxygenToNull() noexcept
{
	oxygen_.reset();
	dirtyFlag_[4] = true;
}

const float &Sensor::getValueOfDo() const noexcept
{
	static const float defaultValue = float();
	if (do_)
		return *do_;
	return defaultValue;
}
const std::shared_ptr<float> &Sensor::getDo() const noexcept
{
	return do_;
}
void Sensor::setDo(const float &pDo) noexcept
{
	do_ = std::make_shared<float>(pDo);
	dirtyFlag_[5] = true;
}
void Sensor::setDoToNull() noexcept
{
	do_.reset();
	dirtyFlag_[5] = true;
}

void Sensor::updateId(const uint64_t id)
{
	id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &Sensor::insertColumns() noexcept
{
	static const std::vector<std::string> inCols = {
		"Temperature",
		"TU_Value",
		"create_time",
		"Oxygen",
		"DO"};
	return inCols;
}

void Sensor::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
	if (dirtyFlag_[1])
	{
		if (getTemperature())
		{
			binder << getValueOfTemperature();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[2])
	{
		if (getTuValue())
		{
			binder << getValueOfTuValue();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[3])
	{
		if (getCreateTime())
		{
			binder << getValueOfCreateTime();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[4])
	{
		if (getOxygen())
		{
			binder << getValueOfOxygen();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[5])
	{
		if (getDo())
		{
			binder << getValueOfDo();
		}
		else
		{
			binder << nullptr;
		}
	}
}

const std::vector<std::string> Sensor::updateColumns() const
{
	std::vector<std::string> ret;
	if (dirtyFlag_[1])
	{
		ret.push_back(getColumnName(1));
	}
	if (dirtyFlag_[2])
	{
		ret.push_back(getColumnName(2));
	}
	if (dirtyFlag_[3])
	{
		ret.push_back(getColumnName(3));
	}
	if (dirtyFlag_[4])
	{
		ret.push_back(getColumnName(4));
	}
	if (dirtyFlag_[5])
	{
		ret.push_back(getColumnName(5));
	}
	return ret;
}

void Sensor::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
	if (dirtyFlag_[1])
	{
		if (getTemperature())
		{
			binder << getValueOfTemperature();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[2])
	{
		if (getTuValue())
		{
			binder << getValueOfTuValue();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[3])
	{
		if (getCreateTime())
		{
			binder << getValueOfCreateTime();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[4])
	{
		if (getOxygen())
		{
			binder << getValueOfOxygen();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[5])
	{
		if (getDo())
		{
			binder << getValueOfDo();
		}
		else
		{
			binder << nullptr;
		}
	}
}
Json::Value Sensor::toJson() const
{
	Json::Value ret;
	if (getId())
	{
		ret["id"] = getValueOfId();
	}
	else
	{
		ret["id"] = Json::Value();
	}
	if (getTemperature())
	{
		ret["Temperature"] = getValueOfTemperature();
	}
	else
	{
		ret["Temperature"] = Json::Value();
	}
	if (getTuValue())
	{
		ret["TU_Value"] = getValueOfTuValue();
	}
	else
	{
		ret["TU_Value"] = Json::Value();
	}
	if (getCreateTime())
	{
		ret["create_time"] = getCreateTime()->toDbStringLocal();
	}
	else
	{
		ret["create_time"] = Json::Value();
	}
	if (getOxygen())
	{
		ret["Oxygen"] = getValueOfOxygen();
	}
	else
	{
		ret["Oxygen"] = Json::Value();
	}
	if (getDo())
	{
		ret["DO"] = getValueOfDo();
	}
	else
	{
		ret["DO"] = Json::Value();
	}
	return ret;
}

Json::Value Sensor::toMasqueradedJson(
	const std::vector<std::string> &pMasqueradingVector) const
{
	Json::Value ret;
	if (pMasqueradingVector.size() == 6)
	{
		if (!pMasqueradingVector[0].empty())
		{
			if (getId())
			{
				ret[pMasqueradingVector[0]] = getValueOfId();
			}
			else
			{
				ret[pMasqueradingVector[0]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[1].empty())
		{
			if (getTemperature())
			{
				ret[pMasqueradingVector[1]] = getValueOfTemperature();
			}
			else
			{
				ret[pMasqueradingVector[1]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[2].empty())
		{
			if (getTuValue())
			{
				ret[pMasqueradingVector[2]] = getValueOfTuValue();
			}
			else
			{
				ret[pMasqueradingVector[2]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[3].empty())
		{
			if (getCreateTime())
			{
				ret[pMasqueradingVector[3]] = getCreateTime()->toDbStringLocal();
			}
			else
			{
				ret[pMasqueradingVector[3]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[4].empty())
		{
			if (getOxygen())
			{
				ret[pMasqueradingVector[4]] = getValueOfOxygen();
			}
			else
			{
				ret[pMasqueradingVector[4]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[5].empty())
		{
			if (getDo())
			{
				ret[pMasqueradingVector[5]] = getValueOfDo();
			}
			else
			{
				ret[pMasqueradingVector[5]] = Json::Value();
			}
		}
		return ret;
	}
	LOG_ERROR << "Masquerade failed";
	if (getId())
	{
		ret["id"] = getValueOfId();
	}
	else
	{
		ret["id"] = Json::Value();
	}
	if (getTemperature())
	{
		ret["Temperature"] = getValueOfTemperature();
	}
	else
	{
		ret["Temperature"] = Json::Value();
	}
	if (getTuValue())
	{
		ret["TU_Value"] = getValueOfTuValue();
	}
	else
	{
		ret["TU_Value"] = Json::Value();
	}
	if (getCreateTime())
	{
		ret["create_time"] = getCreateTime()->toDbStringLocal();
	}
	else
	{
		ret["create_time"] = Json::Value();
	}
	if (getOxygen())
	{
		ret["Oxygen"] = getValueOfOxygen();
	}
	else
	{
		ret["Oxygen"] = Json::Value();
	}
	if (getDo())
	{
		ret["DO"] = getValueOfDo();
	}
	else
	{
		ret["DO"] = Json::Value();
	}
	return ret;
}

bool Sensor::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
	if (pJson.isMember("id"))
	{
		if (!validJsonOfField(0, "id", pJson["id"], err, true))
			return false;
	}
	if (pJson.isMember("Temperature"))
	{
		if (!validJsonOfField(1, "Temperature", pJson["Temperature"], err, true))
			return false;
	}
	if (pJson.isMember("TU_Value"))
	{
		if (!validJsonOfField(2, "TU_Value", pJson["TU_Value"], err, true))
			return false;
	}
	if (pJson.isMember("create_time"))
	{
		if (!validJsonOfField(3, "create_time", pJson["create_time"], err, true))
			return false;
	}
	if (pJson.isMember("Oxygen"))
	{
		if (!validJsonOfField(4, "Oxygen", pJson["Oxygen"], err, true))
			return false;
	}
	if (pJson.isMember("DO"))
	{
		if (!validJsonOfField(5, "DO", pJson["DO"], err, true))
			return false;
	}
	return true;
}
bool Sensor::validateMasqueradedJsonForCreation(const Json::Value &pJson,
												const std::vector<std::string> &pMasqueradingVector,
												std::string &err)
{
	if (pMasqueradingVector.size() != 6)
	{
		err = "Bad masquerading vector";
		return false;
	}
	try
	{
		if (!pMasqueradingVector[0].empty())
		{
			if (pJson.isMember(pMasqueradingVector[0]))
			{
				if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[1].empty())
		{
			if (pJson.isMember(pMasqueradingVector[1]))
			{
				if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[2].empty())
		{
			if (pJson.isMember(pMasqueradingVector[2]))
			{
				if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[3].empty())
		{
			if (pJson.isMember(pMasqueradingVector[3]))
			{
				if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[4].empty())
		{
			if (pJson.isMember(pMasqueradingVector[4]))
			{
				if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[5].empty())
		{
			if (pJson.isMember(pMasqueradingVector[5]))
			{
				if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
					return false;
			}
		}
	}
	catch (const Json::LogicError &e)
	{
		err = e.what();
		return false;
	}
	return true;
}
bool Sensor::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
	if (pJson.isMember("id"))
	{
		if (!validJsonOfField(0, "id", pJson["id"], err, false))
			return false;
	}
	else
	{
		err = "The value of primary key must be set in the json object for update";
		return false;
	}
	if (pJson.isMember("Temperature"))
	{
		if (!validJsonOfField(1, "Temperature", pJson["Temperature"], err, false))
			return false;
	}
	if (pJson.isMember("TU_Value"))
	{
		if (!validJsonOfField(2, "TU_Value", pJson["TU_Value"], err, false))
			return false;
	}
	if (pJson.isMember("create_time"))
	{
		if (!validJsonOfField(3, "create_time", pJson["create_time"], err, false))
			return false;
	}
	if (pJson.isMember("Oxygen"))
	{
		if (!validJsonOfField(4, "Oxygen", pJson["Oxygen"], err, false))
			return false;
	}
	if (pJson.isMember("DO"))
	{
		if (!validJsonOfField(5, "DO", pJson["DO"], err, false))
			return false;
	}
	return true;
}
bool Sensor::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
											  const std::vector<std::string> &pMasqueradingVector,
											  std::string &err)
{
	if (pMasqueradingVector.size() != 6)
	{
		err = "Bad masquerading vector";
		return false;
	}
	try
	{
		if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
		{
			if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
				return false;
		}
		else
		{
			err = "The value of primary key must be set in the json object for update";
			return false;
		}
		if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
		{
			if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
				return false;
		}
		if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
		{
			if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
				return false;
		}
		if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
		{
			if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
				return false;
		}
		if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
		{
			if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
				return false;
		}
		if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
		{
			if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
				return false;
		}
	}
	catch (const Json::LogicError &e)
	{
		err = e.what();
		return false;
	}
	return true;
}
bool Sensor::validJsonOfField(size_t index,
							  const std::string &fieldName,
							  const Json::Value &pJson,
							  std::string &err,
							  bool isForCreation)
{
	switch (index)
	{
	case 0:
		if (pJson.isNull())
		{
			err = "The " + fieldName + " column cannot be null";
			return false;
		}
		if (isForCreation)
		{
			err = "The automatic primary key cannot be set";
			return false;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 1:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isNumeric())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 2:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isNumeric())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 3:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isString())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 4:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isNumeric())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 5:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isNumeric())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	default:
		err = "Internal error in the server";
		return false;
	}
	return true;
}
