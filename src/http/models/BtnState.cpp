/**
 *
 *  BtnState.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "src/http/models/BtnState.hpp"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::ship;

const std::string BtnState::Cols::_id = "id";
const std::string BtnState::Cols::_pump = "pump";
const std::string BtnState::Cols::_light = "light";
const std::string BtnState::Cols::_oxygen_pump = "oxygen_pump";
const std::string BtnState::Cols::_feeding = "feeding";
const std::string BtnState::Cols::_video = "video";
const std::string BtnState::Cols::_create_time = "create_time";
const std::string BtnState::primaryKeyName = "id";
const bool BtnState::hasPrimaryKey = true;
const std::string BtnState::tableName = "btn_state";

const std::vector<typename BtnState::MetaData> BtnState::metaData_ = {
	{"id", "int32_t", "int", 4, 1, 1, 1},
	{"pump", "int32_t", "int", 4, 0, 0, 0},
	{"light", "int32_t", "int", 4, 0, 0, 0},
	{"oxygen_pump", "int32_t", "int", 4, 0, 0, 0},
	{"feeding", "int32_t", "int", 4, 0, 0, 0},
	{"video", "int32_t", "int", 4, 0, 0, 0},
	{"create_time", "::trantor::Date", "timestamp", 0, 0, 0, 0}};
const std::string &BtnState::getColumnName(size_t index) noexcept(false)
{
	assert(index < metaData_.size());
	return metaData_[index].colName_;
}
BtnState::BtnState(const Row &r, const ssize_t indexOffset) noexcept
{
	if (indexOffset < 0)
	{
		if (!r["id"].isNull())
		{
			id_ = std::make_shared<int32_t>(r["id"].as<int32_t>());
		}
		if (!r["pump"].isNull())
		{
			pump_ = std::make_shared<int32_t>(r["pump"].as<int32_t>());
		}
		if (!r["light"].isNull())
		{
			light_ = std::make_shared<int32_t>(r["light"].as<int32_t>());
		}
		if (!r["oxygen_pump"].isNull())
		{
			oxygenPump_ = std::make_shared<int32_t>(r["oxygen_pump"].as<int32_t>());
		}
		if (!r["feeding"].isNull())
		{
			feeding_ = std::make_shared<int32_t>(r["feeding"].as<int32_t>());
		}
		if (!r["video"].isNull())
		{
			video_ = std::make_shared<int32_t>(r["video"].as<int32_t>());
		}
		if (!r["create_time"].isNull())
		{
			auto timeStr = r["create_time"].as<std::string>();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
	else
	{
		size_t offset = (size_t)indexOffset;
		if (offset + 7 > r.size())
		{
			LOG_FATAL << "Invalid SQL result for this model";
			return;
		}
		size_t index;
		index = offset + 0;
		if (!r[index].isNull())
		{
			id_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 1;
		if (!r[index].isNull())
		{
			pump_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 2;
		if (!r[index].isNull())
		{
			light_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 3;
		if (!r[index].isNull())
		{
			oxygenPump_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 4;
		if (!r[index].isNull())
		{
			feeding_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 5;
		if (!r[index].isNull())
		{
			video_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 6;
		if (!r[index].isNull())
		{
			auto timeStr = r[index].as<std::string>();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
}

BtnState::BtnState(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
	if (pMasqueradingVector.size() != 7)
	{
		LOG_ERROR << "Bad masquerading vector";
		return;
	}
	if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
	{
		dirtyFlag_[0] = true;
		if (!pJson[pMasqueradingVector[0]].isNull())
		{
			id_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
		}
	}
	if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
	{
		dirtyFlag_[1] = true;
		if (!pJson[pMasqueradingVector[1]].isNull())
		{
			pump_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
		}
	}
	if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
	{
		dirtyFlag_[2] = true;
		if (!pJson[pMasqueradingVector[2]].isNull())
		{
			light_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
		}
	}
	if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
	{
		dirtyFlag_[3] = true;
		if (!pJson[pMasqueradingVector[3]].isNull())
		{
			oxygenPump_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
		}
	}
	if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
	{
		dirtyFlag_[4] = true;
		if (!pJson[pMasqueradingVector[4]].isNull())
		{
			feeding_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
		}
	}
	if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
	{
		dirtyFlag_[5] = true;
		if (!pJson[pMasqueradingVector[5]].isNull())
		{
			video_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
		}
	}
	if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
	{
		dirtyFlag_[6] = true;
		if (!pJson[pMasqueradingVector[6]].isNull())
		{
			auto timeStr = pJson[pMasqueradingVector[6]].asString();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
}

BtnState::BtnState(const Json::Value &pJson) noexcept(false)
{
	if (pJson.isMember("id"))
	{
		dirtyFlag_[0] = true;
		if (!pJson["id"].isNull())
		{
			id_ = std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
		}
	}
	if (pJson.isMember("pump"))
	{
		dirtyFlag_[1] = true;
		if (!pJson["pump"].isNull())
		{
			pump_ = std::make_shared<int32_t>((int32_t)pJson["pump"].asInt64());
		}
	}
	if (pJson.isMember("light"))
	{
		dirtyFlag_[2] = true;
		if (!pJson["light"].isNull())
		{
			light_ = std::make_shared<int32_t>((int32_t)pJson["light"].asInt64());
		}
	}
	if (pJson.isMember("oxygen_pump"))
	{
		dirtyFlag_[3] = true;
		if (!pJson["oxygen_pump"].isNull())
		{
			oxygenPump_ = std::make_shared<int32_t>((int32_t)pJson["oxygen_pump"].asInt64());
		}
	}
	if (pJson.isMember("feeding"))
	{
		dirtyFlag_[4] = true;
		if (!pJson["feeding"].isNull())
		{
			feeding_ = std::make_shared<int32_t>((int32_t)pJson["feeding"].asInt64());
		}
	}
	if (pJson.isMember("video"))
	{
		dirtyFlag_[5] = true;
		if (!pJson["video"].isNull())
		{
			video_ = std::make_shared<int32_t>((int32_t)pJson["video"].asInt64());
		}
	}
	if (pJson.isMember("create_time"))
	{
		dirtyFlag_[6] = true;
		if (!pJson["create_time"].isNull())
		{
			auto timeStr = pJson["create_time"].asString();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
}

void BtnState::updateByMasqueradedJson(const Json::Value &pJson,
									   const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
	if (pMasqueradingVector.size() != 7)
	{
		LOG_ERROR << "Bad masquerading vector";
		return;
	}
	if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
	{
		if (!pJson[pMasqueradingVector[0]].isNull())
		{
			id_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
		}
	}
	if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
	{
		dirtyFlag_[1] = true;
		if (!pJson[pMasqueradingVector[1]].isNull())
		{
			pump_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
		}
	}
	if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
	{
		dirtyFlag_[2] = true;
		if (!pJson[pMasqueradingVector[2]].isNull())
		{
			light_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
		}
	}
	if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
	{
		dirtyFlag_[3] = true;
		if (!pJson[pMasqueradingVector[3]].isNull())
		{
			oxygenPump_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
		}
	}
	if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
	{
		dirtyFlag_[4] = true;
		if (!pJson[pMasqueradingVector[4]].isNull())
		{
			feeding_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
		}
	}
	if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
	{
		dirtyFlag_[5] = true;
		if (!pJson[pMasqueradingVector[5]].isNull())
		{
			video_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
		}
	}
	if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
	{
		dirtyFlag_[6] = true;
		if (!pJson[pMasqueradingVector[6]].isNull())
		{
			auto timeStr = pJson[pMasqueradingVector[6]].asString();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
}

void BtnState::updateByJson(const Json::Value &pJson) noexcept(false)
{
	if (pJson.isMember("id"))
	{
		if (!pJson["id"].isNull())
		{
			id_ = std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
		}
	}
	if (pJson.isMember("pump"))
	{
		dirtyFlag_[1] = true;
		if (!pJson["pump"].isNull())
		{
			pump_ = std::make_shared<int32_t>((int32_t)pJson["pump"].asInt64());
		}
	}
	if (pJson.isMember("light"))
	{
		dirtyFlag_[2] = true;
		if (!pJson["light"].isNull())
		{
			light_ = std::make_shared<int32_t>((int32_t)pJson["light"].asInt64());
		}
	}
	if (pJson.isMember("oxygen_pump"))
	{
		dirtyFlag_[3] = true;
		if (!pJson["oxygen_pump"].isNull())
		{
			oxygenPump_ = std::make_shared<int32_t>((int32_t)pJson["oxygen_pump"].asInt64());
		}
	}
	if (pJson.isMember("feeding"))
	{
		dirtyFlag_[4] = true;
		if (!pJson["feeding"].isNull())
		{
			feeding_ = std::make_shared<int32_t>((int32_t)pJson["feeding"].asInt64());
		}
	}
	if (pJson.isMember("video"))
	{
		dirtyFlag_[5] = true;
		if (!pJson["video"].isNull())
		{
			video_ = std::make_shared<int32_t>((int32_t)pJson["video"].asInt64());
		}
	}
	if (pJson.isMember("create_time"))
	{
		dirtyFlag_[6] = true;
		if (!pJson["create_time"].isNull())
		{
			auto timeStr = pJson["create_time"].asString();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
}

const int32_t &BtnState::getValueOfId() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (id_)
		return *id_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &BtnState::getId() const noexcept
{
	return id_;
}
void BtnState::setId(const int32_t &pId) noexcept
{
	id_ = std::make_shared<int32_t>(pId);
	dirtyFlag_[0] = true;
}
const typename BtnState::PrimaryKeyType &BtnState::getPrimaryKey() const
{
	assert(id_);
	return *id_;
}

const int32_t &BtnState::getValueOfPump() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (pump_)
		return *pump_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &BtnState::getPump() const noexcept
{
	return pump_;
}
void BtnState::setPump(const int32_t &pPump) noexcept
{
	pump_ = std::make_shared<int32_t>(pPump);
	dirtyFlag_[1] = true;
}
void BtnState::setPumpToNull() noexcept
{
	pump_.reset();
	dirtyFlag_[1] = true;
}

const int32_t &BtnState::getValueOfLight() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (light_)
		return *light_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &BtnState::getLight() const noexcept
{
	return light_;
}
void BtnState::setLight(const int32_t &pLight) noexcept
{
	light_ = std::make_shared<int32_t>(pLight);
	dirtyFlag_[2] = true;
}
void BtnState::setLightToNull() noexcept
{
	light_.reset();
	dirtyFlag_[2] = true;
}

const int32_t &BtnState::getValueOfOxygenPump() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (oxygenPump_)
		return *oxygenPump_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &BtnState::getOxygenPump() const noexcept
{
	return oxygenPump_;
}
void BtnState::setOxygenPump(const int32_t &pOxygenPump) noexcept
{
	oxygenPump_ = std::make_shared<int32_t>(pOxygenPump);
	dirtyFlag_[3] = true;
}
void BtnState::setOxygenPumpToNull() noexcept
{
	oxygenPump_.reset();
	dirtyFlag_[3] = true;
}

const int32_t &BtnState::getValueOfFeeding() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (feeding_)
		return *feeding_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &BtnState::getFeeding() const noexcept
{
	return feeding_;
}
void BtnState::setFeeding(const int32_t &pFeeding) noexcept
{
	feeding_ = std::make_shared<int32_t>(pFeeding);
	dirtyFlag_[4] = true;
}
void BtnState::setFeedingToNull() noexcept
{
	feeding_.reset();
	dirtyFlag_[4] = true;
}

const int32_t &BtnState::getValueOfVideo() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (video_)
		return *video_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &BtnState::getVideo() const noexcept
{
	return video_;
}
void BtnState::setVideo(const int32_t &pVideo) noexcept
{
	video_ = std::make_shared<int32_t>(pVideo);
	dirtyFlag_[5] = true;
}
void BtnState::setVideoToNull() noexcept
{
	video_.reset();
	dirtyFlag_[5] = true;
}

const ::trantor::Date &BtnState::getValueOfCreateTime() const noexcept
{
	static const ::trantor::Date defaultValue = ::trantor::Date();
	if (createTime_)
		return *createTime_;
	return defaultValue;
}
const std::shared_ptr<::trantor::Date> &BtnState::getCreateTime() const noexcept
{
	return createTime_;
}
void BtnState::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
	createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
	dirtyFlag_[6] = true;
}
void BtnState::setCreateTimeToNull() noexcept
{
	createTime_.reset();
	dirtyFlag_[6] = true;
}

void BtnState::updateId(const uint64_t id)
{
	id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &BtnState::insertColumns() noexcept
{
	static const std::vector<std::string> inCols = {
		"pump",
		"light",
		"oxygen_pump",
		"feeding",
		"video",
		"create_time"};
	return inCols;
}

void BtnState::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
	if (dirtyFlag_[1])
	{
		if (getPump())
		{
			binder << getValueOfPump();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[2])
	{
		if (getLight())
		{
			binder << getValueOfLight();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[3])
	{
		if (getOxygenPump())
		{
			binder << getValueOfOxygenPump();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[4])
	{
		if (getFeeding())
		{
			binder << getValueOfFeeding();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[5])
	{
		if (getVideo())
		{
			binder << getValueOfVideo();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[6])
	{
		if (getCreateTime())
		{
			binder << getValueOfCreateTime();
		}
		else
		{
			binder << nullptr;
		}
	}
}

const std::vector<std::string> BtnState::updateColumns() const
{
	std::vector<std::string> ret;
	if (dirtyFlag_[1])
	{
		ret.push_back(getColumnName(1));
	}
	if (dirtyFlag_[2])
	{
		ret.push_back(getColumnName(2));
	}
	if (dirtyFlag_[3])
	{
		ret.push_back(getColumnName(3));
	}
	if (dirtyFlag_[4])
	{
		ret.push_back(getColumnName(4));
	}
	if (dirtyFlag_[5])
	{
		ret.push_back(getColumnName(5));
	}
	if (dirtyFlag_[6])
	{
		ret.push_back(getColumnName(6));
	}
	return ret;
}

void BtnState::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
	if (dirtyFlag_[1])
	{
		if (getPump())
		{
			binder << getValueOfPump();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[2])
	{
		if (getLight())
		{
			binder << getValueOfLight();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[3])
	{
		if (getOxygenPump())
		{
			binder << getValueOfOxygenPump();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[4])
	{
		if (getFeeding())
		{
			binder << getValueOfFeeding();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[5])
	{
		if (getVideo())
		{
			binder << getValueOfVideo();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[6])
	{
		if (getCreateTime())
		{
			binder << getValueOfCreateTime();
		}
		else
		{
			binder << nullptr;
		}
	}
}
Json::Value BtnState::toJson() const
{
	Json::Value ret;
	if (getId())
	{
		ret["id"] = getValueOfId();
	}
	else
	{
		ret["id"] = Json::Value();
	}
	if (getPump())
	{
		ret["pump"] = getValueOfPump();
	}
	else
	{
		ret["pump"] = Json::Value();
	}
	if (getLight())
	{
		ret["light"] = getValueOfLight();
	}
	else
	{
		ret["light"] = Json::Value();
	}
	if (getOxygenPump())
	{
		ret["oxygen_pump"] = getValueOfOxygenPump();
	}
	else
	{
		ret["oxygen_pump"] = Json::Value();
	}
	if (getFeeding())
	{
		ret["feeding"] = getValueOfFeeding();
	}
	else
	{
		ret["feeding"] = Json::Value();
	}
	if (getVideo())
	{
		ret["video"] = getValueOfVideo();
	}
	else
	{
		ret["video"] = Json::Value();
	}
	if (getCreateTime())
	{
		ret["create_time"] = getCreateTime()->toDbStringLocal();
	}
	else
	{
		ret["create_time"] = Json::Value();
	}
	return ret;
}

Json::Value BtnState::toMasqueradedJson(
	const std::vector<std::string> &pMasqueradingVector) const
{
	Json::Value ret;
	if (pMasqueradingVector.size() == 7)
	{
		if (!pMasqueradingVector[0].empty())
		{
			if (getId())
			{
				ret[pMasqueradingVector[0]] = getValueOfId();
			}
			else
			{
				ret[pMasqueradingVector[0]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[1].empty())
		{
			if (getPump())
			{
				ret[pMasqueradingVector[1]] = getValueOfPump();
			}
			else
			{
				ret[pMasqueradingVector[1]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[2].empty())
		{
			if (getLight())
			{
				ret[pMasqueradingVector[2]] = getValueOfLight();
			}
			else
			{
				ret[pMasqueradingVector[2]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[3].empty())
		{
			if (getOxygenPump())
			{
				ret[pMasqueradingVector[3]] = getValueOfOxygenPump();
			}
			else
			{
				ret[pMasqueradingVector[3]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[4].empty())
		{
			if (getFeeding())
			{
				ret[pMasqueradingVector[4]] = getValueOfFeeding();
			}
			else
			{
				ret[pMasqueradingVector[4]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[5].empty())
		{
			if (getVideo())
			{
				ret[pMasqueradingVector[5]] = getValueOfVideo();
			}
			else
			{
				ret[pMasqueradingVector[5]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[6].empty())
		{
			if (getCreateTime())
			{
				ret[pMasqueradingVector[6]] = getCreateTime()->toDbStringLocal();
			}
			else
			{
				ret[pMasqueradingVector[6]] = Json::Value();
			}
		}
		return ret;
	}
	LOG_ERROR << "Masquerade failed";
	if (getId())
	{
		ret["id"] = getValueOfId();
	}
	else
	{
		ret["id"] = Json::Value();
	}
	if (getPump())
	{
		ret["pump"] = getValueOfPump();
	}
	else
	{
		ret["pump"] = Json::Value();
	}
	if (getLight())
	{
		ret["light"] = getValueOfLight();
	}
	else
	{
		ret["light"] = Json::Value();
	}
	if (getOxygenPump())
	{
		ret["oxygen_pump"] = getValueOfOxygenPump();
	}
	else
	{
		ret["oxygen_pump"] = Json::Value();
	}
	if (getFeeding())
	{
		ret["feeding"] = getValueOfFeeding();
	}
	else
	{
		ret["feeding"] = Json::Value();
	}
	if (getVideo())
	{
		ret["video"] = getValueOfVideo();
	}
	else
	{
		ret["video"] = Json::Value();
	}
	if (getCreateTime())
	{
		ret["create_time"] = getCreateTime()->toDbStringLocal();
	}
	else
	{
		ret["create_time"] = Json::Value();
	}
	return ret;
}

bool BtnState::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
	if (pJson.isMember("id"))
	{
		if (!validJsonOfField(0, "id", pJson["id"], err, true))
			return false;
	}
	if (pJson.isMember("pump"))
	{
		if (!validJsonOfField(1, "pump", pJson["pump"], err, true))
			return false;
	}
	if (pJson.isMember("light"))
	{
		if (!validJsonOfField(2, "light", pJson["light"], err, true))
			return false;
	}
	if (pJson.isMember("oxygen_pump"))
	{
		if (!validJsonOfField(3, "oxygen_pump", pJson["oxygen_pump"], err, true))
			return false;
	}
	if (pJson.isMember("feeding"))
	{
		if (!validJsonOfField(4, "feeding", pJson["feeding"], err, true))
			return false;
	}
	if (pJson.isMember("video"))
	{
		if (!validJsonOfField(5, "video", pJson["video"], err, true))
			return false;
	}
	if (pJson.isMember("create_time"))
	{
		if (!validJsonOfField(6, "create_time", pJson["create_time"], err, true))
			return false;
	}
	return true;
}
bool BtnState::validateMasqueradedJsonForCreation(const Json::Value &pJson,
												  const std::vector<std::string> &pMasqueradingVector,
												  std::string &err)
{
	if (pMasqueradingVector.size() != 7)
	{
		err = "Bad masquerading vector";
		return false;
	}
	try
	{
		if (!pMasqueradingVector[0].empty())
		{
			if (pJson.isMember(pMasqueradingVector[0]))
			{
				if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[1].empty())
		{
			if (pJson.isMember(pMasqueradingVector[1]))
			{
				if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[2].empty())
		{
			if (pJson.isMember(pMasqueradingVector[2]))
			{
				if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[3].empty())
		{
			if (pJson.isMember(pMasqueradingVector[3]))
			{
				if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[4].empty())
		{
			if (pJson.isMember(pMasqueradingVector[4]))
			{
				if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[5].empty())
		{
			if (pJson.isMember(pMasqueradingVector[5]))
			{
				if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[6].empty())
		{
			if (pJson.isMember(pMasqueradingVector[6]))
			{
				if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
					return false;
			}
		}
	}
	catch (const Json::LogicError &e)
	{
		err = e.what();
		return false;
	}
	return true;
}
bool BtnState::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
	if (pJson.isMember("id"))
	{
		if (!validJsonOfField(0, "id", pJson["id"], err, false))
			return false;
	}
	else
	{
		err = "The value of primary key must be set in the json object for update";
		return false;
	}
	if (pJson.isMember("pump"))
	{
		if (!validJsonOfField(1, "pump", pJson["pump"], err, false))
			return false;
	}
	if (pJson.isMember("light"))
	{
		if (!validJsonOfField(2, "light", pJson["light"], err, false))
			return false;
	}
	if (pJson.isMember("oxygen_pump"))
	{
		if (!validJsonOfField(3, "oxygen_pump", pJson["oxygen_pump"], err, false))
			return false;
	}
	if (pJson.isMember("feeding"))
	{
		if (!validJsonOfField(4, "feeding", pJson["feeding"], err, false))
			return false;
	}
	if (pJson.isMember("video"))
	{
		if (!validJsonOfField(5, "video", pJson["video"], err, false))
			return false;
	}
	if (pJson.isMember("create_time"))
	{
		if (!validJsonOfField(6, "create_time", pJson["create_time"], err, false))
			return false;
	}
	return true;
}
bool BtnState::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
												const std::vector<std::string> &pMasqueradingVector,
												std::string &err)
{
	if (pMasqueradingVector.size() != 7)
	{
		err = "Bad masquerading vector";
		return false;
	}
	try
	{
		if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
		{
			if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
				return false;
		}
		else
		{
			err = "The value of primary key must be set in the json object for update";
			return false;
		}
		if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
		{
			if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
				return false;
		}
		if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
		{
			if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
				return false;
		}
		if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
		{
			if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
				return false;
		}
		if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
		{
			if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
				return false;
		}
		if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
		{
			if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
				return false;
		}
		if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
		{
			if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
				return false;
		}
	}
	catch (const Json::LogicError &e)
	{
		err = e.what();
		return false;
	}
	return true;
}
bool BtnState::validJsonOfField(size_t index,
								const std::string &fieldName,
								const Json::Value &pJson,
								std::string &err,
								bool isForCreation)
{
	switch (index)
	{
	case 0:
		if (pJson.isNull())
		{
			err = "The " + fieldName + " column cannot be null";
			return false;
		}
		if (isForCreation)
		{
			err = "The automatic primary key cannot be set";
			return false;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 1:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 2:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 3:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 4:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 5:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 6:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isString())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	default:
		err = "Internal error in the server";
		return false;
	}
	return true;
}
