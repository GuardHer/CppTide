/**
 *
 *  Gps.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "src/http/models/Gps.hpp"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::ship;

const std::string Gps::Cols::_id = "id";
const std::string Gps::Cols::_sj = "sj";
const std::string Gps::Cols::_wgs84_lng = "wgs84_lng";
const std::string Gps::Cols::_wgs84_lat = "wgs84_lat";
const std::string Gps::Cols::_gcj02_lng = "gcj02_lng";
const std::string Gps::Cols::_gcj02_lat = "gcj02_lat";
const std::string Gps::Cols::_bd09_lng = "bd09_lng";
const std::string Gps::Cols::_bd09_lat = "bd09_lat";
const std::string Gps::Cols::_gps_qual = "gps_qual";
const std::string Gps::Cols::_num_sats = "num_sats";
const std::string Gps::Cols::_horizontal_dil = "horizontal_dil";
const std::string Gps::Cols::_altitude = "altitude";
const std::string Gps::Cols::_create_time = "create_time";
const std::string Gps::primaryKeyName = "id";
const bool Gps::hasPrimaryKey = true;
const std::string Gps::tableName = "gps";

const std::vector<typename Gps::MetaData> Gps::metaData_ = {
	{"id", "int32_t", "int", 4, 1, 1, 1},
	{"sj", "std::string", "varchar(50)", 50, 0, 0, 0},
	{"wgs84_lng", "std::string", "varchar(30)", 30, 0, 0, 0},
	{"wgs84_lat", "std::string", "varchar(30)", 30, 0, 0, 0},
	{"gcj02_lng", "std::string", "varchar(30)", 30, 0, 0, 0},
	{"gcj02_lat", "std::string", "varchar(30)", 30, 0, 0, 0},
	{"bd09_lng", "std::string", "varchar(30)", 30, 0, 0, 0},
	{"bd09_lat", "std::string", "varchar(30)", 30, 0, 0, 0},
	{"gps_qual", "std::string", "varchar(30)", 30, 0, 0, 0},
	{"num_sats", "std::string", "varchar(30)", 30, 0, 0, 0},
	{"horizontal_dil", "std::string", "varchar(30)", 30, 0, 0, 0},
	{"altitude", "std::string", "varchar(30)", 30, 0, 0, 0},
	{"create_time", "::trantor::Date", "timestamp", 0, 0, 0, 0}};
const std::string &Gps::getColumnName(size_t index) noexcept(false)
{
	assert(index < metaData_.size());
	return metaData_[index].colName_;
}
Gps::Gps(const Row &r, const ssize_t indexOffset) noexcept
{
	if (indexOffset < 0)
	{
		if (!r["id"].isNull())
		{
			id_ = std::make_shared<int32_t>(r["id"].as<int32_t>());
		}
		if (!r["sj"].isNull())
		{
			sj_ = std::make_shared<std::string>(r["sj"].as<std::string>());
		}
		if (!r["wgs84_lng"].isNull())
		{
			wgs84Lng_ = std::make_shared<std::string>(r["wgs84_lng"].as<std::string>());
		}
		if (!r["wgs84_lat"].isNull())
		{
			wgs84Lat_ = std::make_shared<std::string>(r["wgs84_lat"].as<std::string>());
		}
		if (!r["gcj02_lng"].isNull())
		{
			gcj02Lng_ = std::make_shared<std::string>(r["gcj02_lng"].as<std::string>());
		}
		if (!r["gcj02_lat"].isNull())
		{
			gcj02Lat_ = std::make_shared<std::string>(r["gcj02_lat"].as<std::string>());
		}
		if (!r["bd09_lng"].isNull())
		{
			bd09Lng_ = std::make_shared<std::string>(r["bd09_lng"].as<std::string>());
		}
		if (!r["bd09_lat"].isNull())
		{
			bd09Lat_ = std::make_shared<std::string>(r["bd09_lat"].as<std::string>());
		}
		if (!r["gps_qual"].isNull())
		{
			gpsQual_ = std::make_shared<std::string>(r["gps_qual"].as<std::string>());
		}
		if (!r["num_sats"].isNull())
		{
			numSats_ = std::make_shared<std::string>(r["num_sats"].as<std::string>());
		}
		if (!r["horizontal_dil"].isNull())
		{
			horizontalDil_ = std::make_shared<std::string>(r["horizontal_dil"].as<std::string>());
		}
		if (!r["altitude"].isNull())
		{
			altitude_ = std::make_shared<std::string>(r["altitude"].as<std::string>());
		}
		if (!r["create_time"].isNull())
		{
			auto timeStr = r["create_time"].as<std::string>();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
	else
	{
		size_t offset = (size_t)indexOffset;
		if (offset + 13 > r.size())
		{
			LOG_FATAL << "Invalid SQL result for this model";
			return;
		}
		size_t index;
		index = offset + 0;
		if (!r[index].isNull())
		{
			id_ = std::make_shared<int32_t>(r[index].as<int32_t>());
		}
		index = offset + 1;
		if (!r[index].isNull())
		{
			sj_ = std::make_shared<std::string>(r[index].as<std::string>());
		}
		index = offset + 2;
		if (!r[index].isNull())
		{
			wgs84Lng_ = std::make_shared<std::string>(r[index].as<std::string>());
		}
		index = offset + 3;
		if (!r[index].isNull())
		{
			wgs84Lat_ = std::make_shared<std::string>(r[index].as<std::string>());
		}
		index = offset + 4;
		if (!r[index].isNull())
		{
			gcj02Lng_ = std::make_shared<std::string>(r[index].as<std::string>());
		}
		index = offset + 5;
		if (!r[index].isNull())
		{
			gcj02Lat_ = std::make_shared<std::string>(r[index].as<std::string>());
		}
		index = offset + 6;
		if (!r[index].isNull())
		{
			bd09Lng_ = std::make_shared<std::string>(r[index].as<std::string>());
		}
		index = offset + 7;
		if (!r[index].isNull())
		{
			bd09Lat_ = std::make_shared<std::string>(r[index].as<std::string>());
		}
		index = offset + 8;
		if (!r[index].isNull())
		{
			gpsQual_ = std::make_shared<std::string>(r[index].as<std::string>());
		}
		index = offset + 9;
		if (!r[index].isNull())
		{
			numSats_ = std::make_shared<std::string>(r[index].as<std::string>());
		}
		index = offset + 10;
		if (!r[index].isNull())
		{
			horizontalDil_ = std::make_shared<std::string>(r[index].as<std::string>());
		}
		index = offset + 11;
		if (!r[index].isNull())
		{
			altitude_ = std::make_shared<std::string>(r[index].as<std::string>());
		}
		index = offset + 12;
		if (!r[index].isNull())
		{
			auto timeStr = r[index].as<std::string>();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
}

Gps::Gps(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
	if (pMasqueradingVector.size() != 13)
	{
		LOG_ERROR << "Bad masquerading vector";
		return;
	}
	if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
	{
		dirtyFlag_[0] = true;
		if (!pJson[pMasqueradingVector[0]].isNull())
		{
			id_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
		}
	}
	if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
	{
		dirtyFlag_[1] = true;
		if (!pJson[pMasqueradingVector[1]].isNull())
		{
			sj_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
		}
	}
	if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
	{
		dirtyFlag_[2] = true;
		if (!pJson[pMasqueradingVector[2]].isNull())
		{
			wgs84Lng_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
		}
	}
	if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
	{
		dirtyFlag_[3] = true;
		if (!pJson[pMasqueradingVector[3]].isNull())
		{
			wgs84Lat_ = std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
		}
	}
	if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
	{
		dirtyFlag_[4] = true;
		if (!pJson[pMasqueradingVector[4]].isNull())
		{
			gcj02Lng_ = std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
		}
	}
	if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
	{
		dirtyFlag_[5] = true;
		if (!pJson[pMasqueradingVector[5]].isNull())
		{
			gcj02Lat_ = std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
		}
	}
	if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
	{
		dirtyFlag_[6] = true;
		if (!pJson[pMasqueradingVector[6]].isNull())
		{
			bd09Lng_ = std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
		}
	}
	if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
	{
		dirtyFlag_[7] = true;
		if (!pJson[pMasqueradingVector[7]].isNull())
		{
			bd09Lat_ = std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
		}
	}
	if (!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
	{
		dirtyFlag_[8] = true;
		if (!pJson[pMasqueradingVector[8]].isNull())
		{
			gpsQual_ = std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
		}
	}
	if (!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
	{
		dirtyFlag_[9] = true;
		if (!pJson[pMasqueradingVector[9]].isNull())
		{
			numSats_ = std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
		}
	}
	if (!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
	{
		dirtyFlag_[10] = true;
		if (!pJson[pMasqueradingVector[10]].isNull())
		{
			horizontalDil_ = std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
		}
	}
	if (!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
	{
		dirtyFlag_[11] = true;
		if (!pJson[pMasqueradingVector[11]].isNull())
		{
			altitude_ = std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
		}
	}
	if (!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
	{
		dirtyFlag_[12] = true;
		if (!pJson[pMasqueradingVector[12]].isNull())
		{
			auto timeStr = pJson[pMasqueradingVector[12]].asString();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
}

Gps::Gps(const Json::Value &pJson) noexcept(false)
{
	if (pJson.isMember("id"))
	{
		dirtyFlag_[0] = true;
		if (!pJson["id"].isNull())
		{
			id_ = std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
		}
	}
	if (pJson.isMember("sj"))
	{
		dirtyFlag_[1] = true;
		if (!pJson["sj"].isNull())
		{
			sj_ = std::make_shared<std::string>(pJson["sj"].asString());
		}
	}
	if (pJson.isMember("wgs84_lng"))
	{
		dirtyFlag_[2] = true;
		if (!pJson["wgs84_lng"].isNull())
		{
			wgs84Lng_ = std::make_shared<std::string>(pJson["wgs84_lng"].asString());
		}
	}
	if (pJson.isMember("wgs84_lat"))
	{
		dirtyFlag_[3] = true;
		if (!pJson["wgs84_lat"].isNull())
		{
			wgs84Lat_ = std::make_shared<std::string>(pJson["wgs84_lat"].asString());
		}
	}
	if (pJson.isMember("gcj02_lng"))
	{
		dirtyFlag_[4] = true;
		if (!pJson["gcj02_lng"].isNull())
		{
			gcj02Lng_ = std::make_shared<std::string>(pJson["gcj02_lng"].asString());
		}
	}
	if (pJson.isMember("gcj02_lat"))
	{
		dirtyFlag_[5] = true;
		if (!pJson["gcj02_lat"].isNull())
		{
			gcj02Lat_ = std::make_shared<std::string>(pJson["gcj02_lat"].asString());
		}
	}
	if (pJson.isMember("bd09_lng"))
	{
		dirtyFlag_[6] = true;
		if (!pJson["bd09_lng"].isNull())
		{
			bd09Lng_ = std::make_shared<std::string>(pJson["bd09_lng"].asString());
		}
	}
	if (pJson.isMember("bd09_lat"))
	{
		dirtyFlag_[7] = true;
		if (!pJson["bd09_lat"].isNull())
		{
			bd09Lat_ = std::make_shared<std::string>(pJson["bd09_lat"].asString());
		}
	}
	if (pJson.isMember("gps_qual"))
	{
		dirtyFlag_[8] = true;
		if (!pJson["gps_qual"].isNull())
		{
			gpsQual_ = std::make_shared<std::string>(pJson["gps_qual"].asString());
		}
	}
	if (pJson.isMember("num_sats"))
	{
		dirtyFlag_[9] = true;
		if (!pJson["num_sats"].isNull())
		{
			numSats_ = std::make_shared<std::string>(pJson["num_sats"].asString());
		}
	}
	if (pJson.isMember("horizontal_dil"))
	{
		dirtyFlag_[10] = true;
		if (!pJson["horizontal_dil"].isNull())
		{
			horizontalDil_ = std::make_shared<std::string>(pJson["horizontal_dil"].asString());
		}
	}
	if (pJson.isMember("altitude"))
	{
		dirtyFlag_[11] = true;
		if (!pJson["altitude"].isNull())
		{
			altitude_ = std::make_shared<std::string>(pJson["altitude"].asString());
		}
	}
	if (pJson.isMember("create_time"))
	{
		dirtyFlag_[12] = true;
		if (!pJson["create_time"].isNull())
		{
			auto timeStr = pJson["create_time"].asString();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
}

void Gps::updateByMasqueradedJson(const Json::Value &pJson,
								  const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
	if (pMasqueradingVector.size() != 13)
	{
		LOG_ERROR << "Bad masquerading vector";
		return;
	}
	if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
	{
		if (!pJson[pMasqueradingVector[0]].isNull())
		{
			id_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
		}
	}
	if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
	{
		dirtyFlag_[1] = true;
		if (!pJson[pMasqueradingVector[1]].isNull())
		{
			sj_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
		}
	}
	if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
	{
		dirtyFlag_[2] = true;
		if (!pJson[pMasqueradingVector[2]].isNull())
		{
			wgs84Lng_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
		}
	}
	if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
	{
		dirtyFlag_[3] = true;
		if (!pJson[pMasqueradingVector[3]].isNull())
		{
			wgs84Lat_ = std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
		}
	}
	if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
	{
		dirtyFlag_[4] = true;
		if (!pJson[pMasqueradingVector[4]].isNull())
		{
			gcj02Lng_ = std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
		}
	}
	if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
	{
		dirtyFlag_[5] = true;
		if (!pJson[pMasqueradingVector[5]].isNull())
		{
			gcj02Lat_ = std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
		}
	}
	if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
	{
		dirtyFlag_[6] = true;
		if (!pJson[pMasqueradingVector[6]].isNull())
		{
			bd09Lng_ = std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
		}
	}
	if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
	{
		dirtyFlag_[7] = true;
		if (!pJson[pMasqueradingVector[7]].isNull())
		{
			bd09Lat_ = std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
		}
	}
	if (!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
	{
		dirtyFlag_[8] = true;
		if (!pJson[pMasqueradingVector[8]].isNull())
		{
			gpsQual_ = std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
		}
	}
	if (!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
	{
		dirtyFlag_[9] = true;
		if (!pJson[pMasqueradingVector[9]].isNull())
		{
			numSats_ = std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
		}
	}
	if (!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
	{
		dirtyFlag_[10] = true;
		if (!pJson[pMasqueradingVector[10]].isNull())
		{
			horizontalDil_ = std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
		}
	}
	if (!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
	{
		dirtyFlag_[11] = true;
		if (!pJson[pMasqueradingVector[11]].isNull())
		{
			altitude_ = std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
		}
	}
	if (!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
	{
		dirtyFlag_[12] = true;
		if (!pJson[pMasqueradingVector[12]].isNull())
		{
			auto timeStr = pJson[pMasqueradingVector[12]].asString();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
}

void Gps::updateByJson(const Json::Value &pJson) noexcept(false)
{
	if (pJson.isMember("id"))
	{
		if (!pJson["id"].isNull())
		{
			id_ = std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
		}
	}
	if (pJson.isMember("sj"))
	{
		dirtyFlag_[1] = true;
		if (!pJson["sj"].isNull())
		{
			sj_ = std::make_shared<std::string>(pJson["sj"].asString());
		}
	}
	if (pJson.isMember("wgs84_lng"))
	{
		dirtyFlag_[2] = true;
		if (!pJson["wgs84_lng"].isNull())
		{
			wgs84Lng_ = std::make_shared<std::string>(pJson["wgs84_lng"].asString());
		}
	}
	if (pJson.isMember("wgs84_lat"))
	{
		dirtyFlag_[3] = true;
		if (!pJson["wgs84_lat"].isNull())
		{
			wgs84Lat_ = std::make_shared<std::string>(pJson["wgs84_lat"].asString());
		}
	}
	if (pJson.isMember("gcj02_lng"))
	{
		dirtyFlag_[4] = true;
		if (!pJson["gcj02_lng"].isNull())
		{
			gcj02Lng_ = std::make_shared<std::string>(pJson["gcj02_lng"].asString());
		}
	}
	if (pJson.isMember("gcj02_lat"))
	{
		dirtyFlag_[5] = true;
		if (!pJson["gcj02_lat"].isNull())
		{
			gcj02Lat_ = std::make_shared<std::string>(pJson["gcj02_lat"].asString());
		}
	}
	if (pJson.isMember("bd09_lng"))
	{
		dirtyFlag_[6] = true;
		if (!pJson["bd09_lng"].isNull())
		{
			bd09Lng_ = std::make_shared<std::string>(pJson["bd09_lng"].asString());
		}
	}
	if (pJson.isMember("bd09_lat"))
	{
		dirtyFlag_[7] = true;
		if (!pJson["bd09_lat"].isNull())
		{
			bd09Lat_ = std::make_shared<std::string>(pJson["bd09_lat"].asString());
		}
	}
	if (pJson.isMember("gps_qual"))
	{
		dirtyFlag_[8] = true;
		if (!pJson["gps_qual"].isNull())
		{
			gpsQual_ = std::make_shared<std::string>(pJson["gps_qual"].asString());
		}
	}
	if (pJson.isMember("num_sats"))
	{
		dirtyFlag_[9] = true;
		if (!pJson["num_sats"].isNull())
		{
			numSats_ = std::make_shared<std::string>(pJson["num_sats"].asString());
		}
	}
	if (pJson.isMember("horizontal_dil"))
	{
		dirtyFlag_[10] = true;
		if (!pJson["horizontal_dil"].isNull())
		{
			horizontalDil_ = std::make_shared<std::string>(pJson["horizontal_dil"].asString());
		}
	}
	if (pJson.isMember("altitude"))
	{
		dirtyFlag_[11] = true;
		if (!pJson["altitude"].isNull())
		{
			altitude_ = std::make_shared<std::string>(pJson["altitude"].asString());
		}
	}
	if (pJson.isMember("create_time"))
	{
		dirtyFlag_[12] = true;
		if (!pJson["create_time"].isNull())
		{
			auto timeStr = pJson["create_time"].asString();
			struct tm stm;
			memset(&stm, 0, sizeof(stm));
			auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
			time_t t = mktime(&stm);
			size_t decimalNum = 0;
			if (p)
			{
				if (*p == '.')
				{
					std::string decimals(p + 1, &timeStr[timeStr.length()]);
					while (decimals.length() < 6)
					{
						decimals += "0";
					}
					decimalNum = (size_t)atol(decimals.c_str());
				}
				createTime_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
			}
		}
	}
}

const int32_t &Gps::getValueOfId() const noexcept
{
	static const int32_t defaultValue = int32_t();
	if (id_)
		return *id_;
	return defaultValue;
}
const std::shared_ptr<int32_t> &Gps::getId() const noexcept
{
	return id_;
}
void Gps::setId(const int32_t &pId) noexcept
{
	id_ = std::make_shared<int32_t>(pId);
	dirtyFlag_[0] = true;
}
const typename Gps::PrimaryKeyType &Gps::getPrimaryKey() const
{
	assert(id_);
	return *id_;
}

const std::string &Gps::getValueOfSj() const noexcept
{
	static const std::string defaultValue = std::string();
	if (sj_)
		return *sj_;
	return defaultValue;
}
const std::shared_ptr<std::string> &Gps::getSj() const noexcept
{
	return sj_;
}
void Gps::setSj(const std::string &pSj) noexcept
{
	sj_ = std::make_shared<std::string>(pSj);
	dirtyFlag_[1] = true;
}
void Gps::setSj(std::string &&pSj) noexcept
{
	sj_ = std::make_shared<std::string>(std::move(pSj));
	dirtyFlag_[1] = true;
}
void Gps::setSjToNull() noexcept
{
	sj_.reset();
	dirtyFlag_[1] = true;
}

const std::string &Gps::getValueOfWgs84Lng() const noexcept
{
	static const std::string defaultValue = std::string();
	if (wgs84Lng_)
		return *wgs84Lng_;
	return defaultValue;
}
const std::shared_ptr<std::string> &Gps::getWgs84Lng() const noexcept
{
	return wgs84Lng_;
}
void Gps::setWgs84Lng(const std::string &pWgs84Lng) noexcept
{
	wgs84Lng_ = std::make_shared<std::string>(pWgs84Lng);
	dirtyFlag_[2] = true;
}
void Gps::setWgs84Lng(std::string &&pWgs84Lng) noexcept
{
	wgs84Lng_ = std::make_shared<std::string>(std::move(pWgs84Lng));
	dirtyFlag_[2] = true;
}
void Gps::setWgs84LngToNull() noexcept
{
	wgs84Lng_.reset();
	dirtyFlag_[2] = true;
}

const std::string &Gps::getValueOfWgs84Lat() const noexcept
{
	static const std::string defaultValue = std::string();
	if (wgs84Lat_)
		return *wgs84Lat_;
	return defaultValue;
}
const std::shared_ptr<std::string> &Gps::getWgs84Lat() const noexcept
{
	return wgs84Lat_;
}
void Gps::setWgs84Lat(const std::string &pWgs84Lat) noexcept
{
	wgs84Lat_ = std::make_shared<std::string>(pWgs84Lat);
	dirtyFlag_[3] = true;
}
void Gps::setWgs84Lat(std::string &&pWgs84Lat) noexcept
{
	wgs84Lat_ = std::make_shared<std::string>(std::move(pWgs84Lat));
	dirtyFlag_[3] = true;
}
void Gps::setWgs84LatToNull() noexcept
{
	wgs84Lat_.reset();
	dirtyFlag_[3] = true;
}

const std::string &Gps::getValueOfGcj02Lng() const noexcept
{
	static const std::string defaultValue = std::string();
	if (gcj02Lng_)
		return *gcj02Lng_;
	return defaultValue;
}
const std::shared_ptr<std::string> &Gps::getGcj02Lng() const noexcept
{
	return gcj02Lng_;
}
void Gps::setGcj02Lng(const std::string &pGcj02Lng) noexcept
{
	gcj02Lng_ = std::make_shared<std::string>(pGcj02Lng);
	dirtyFlag_[4] = true;
}
void Gps::setGcj02Lng(std::string &&pGcj02Lng) noexcept
{
	gcj02Lng_ = std::make_shared<std::string>(std::move(pGcj02Lng));
	dirtyFlag_[4] = true;
}
void Gps::setGcj02LngToNull() noexcept
{
	gcj02Lng_.reset();
	dirtyFlag_[4] = true;
}

const std::string &Gps::getValueOfGcj02Lat() const noexcept
{
	static const std::string defaultValue = std::string();
	if (gcj02Lat_)
		return *gcj02Lat_;
	return defaultValue;
}
const std::shared_ptr<std::string> &Gps::getGcj02Lat() const noexcept
{
	return gcj02Lat_;
}
void Gps::setGcj02Lat(const std::string &pGcj02Lat) noexcept
{
	gcj02Lat_ = std::make_shared<std::string>(pGcj02Lat);
	dirtyFlag_[5] = true;
}
void Gps::setGcj02Lat(std::string &&pGcj02Lat) noexcept
{
	gcj02Lat_ = std::make_shared<std::string>(std::move(pGcj02Lat));
	dirtyFlag_[5] = true;
}
void Gps::setGcj02LatToNull() noexcept
{
	gcj02Lat_.reset();
	dirtyFlag_[5] = true;
}

const std::string &Gps::getValueOfBd09Lng() const noexcept
{
	static const std::string defaultValue = std::string();
	if (bd09Lng_)
		return *bd09Lng_;
	return defaultValue;
}
const std::shared_ptr<std::string> &Gps::getBd09Lng() const noexcept
{
	return bd09Lng_;
}
void Gps::setBd09Lng(const std::string &pBd09Lng) noexcept
{
	bd09Lng_ = std::make_shared<std::string>(pBd09Lng);
	dirtyFlag_[6] = true;
}
void Gps::setBd09Lng(std::string &&pBd09Lng) noexcept
{
	bd09Lng_ = std::make_shared<std::string>(std::move(pBd09Lng));
	dirtyFlag_[6] = true;
}
void Gps::setBd09LngToNull() noexcept
{
	bd09Lng_.reset();
	dirtyFlag_[6] = true;
}

const std::string &Gps::getValueOfBd09Lat() const noexcept
{
	static const std::string defaultValue = std::string();
	if (bd09Lat_)
		return *bd09Lat_;
	return defaultValue;
}
const std::shared_ptr<std::string> &Gps::getBd09Lat() const noexcept
{
	return bd09Lat_;
}
void Gps::setBd09Lat(const std::string &pBd09Lat) noexcept
{
	bd09Lat_ = std::make_shared<std::string>(pBd09Lat);
	dirtyFlag_[7] = true;
}
void Gps::setBd09Lat(std::string &&pBd09Lat) noexcept
{
	bd09Lat_ = std::make_shared<std::string>(std::move(pBd09Lat));
	dirtyFlag_[7] = true;
}
void Gps::setBd09LatToNull() noexcept
{
	bd09Lat_.reset();
	dirtyFlag_[7] = true;
}

const std::string &Gps::getValueOfGpsQual() const noexcept
{
	static const std::string defaultValue = std::string();
	if (gpsQual_)
		return *gpsQual_;
	return defaultValue;
}
const std::shared_ptr<std::string> &Gps::getGpsQual() const noexcept
{
	return gpsQual_;
}
void Gps::setGpsQual(const std::string &pGpsQual) noexcept
{
	gpsQual_ = std::make_shared<std::string>(pGpsQual);
	dirtyFlag_[8] = true;
}
void Gps::setGpsQual(std::string &&pGpsQual) noexcept
{
	gpsQual_ = std::make_shared<std::string>(std::move(pGpsQual));
	dirtyFlag_[8] = true;
}
void Gps::setGpsQualToNull() noexcept
{
	gpsQual_.reset();
	dirtyFlag_[8] = true;
}

const std::string &Gps::getValueOfNumSats() const noexcept
{
	static const std::string defaultValue = std::string();
	if (numSats_)
		return *numSats_;
	return defaultValue;
}
const std::shared_ptr<std::string> &Gps::getNumSats() const noexcept
{
	return numSats_;
}
void Gps::setNumSats(const std::string &pNumSats) noexcept
{
	numSats_ = std::make_shared<std::string>(pNumSats);
	dirtyFlag_[9] = true;
}
void Gps::setNumSats(std::string &&pNumSats) noexcept
{
	numSats_ = std::make_shared<std::string>(std::move(pNumSats));
	dirtyFlag_[9] = true;
}
void Gps::setNumSatsToNull() noexcept
{
	numSats_.reset();
	dirtyFlag_[9] = true;
}

const std::string &Gps::getValueOfHorizontalDil() const noexcept
{
	static const std::string defaultValue = std::string();
	if (horizontalDil_)
		return *horizontalDil_;
	return defaultValue;
}
const std::shared_ptr<std::string> &Gps::getHorizontalDil() const noexcept
{
	return horizontalDil_;
}
void Gps::setHorizontalDil(const std::string &pHorizontalDil) noexcept
{
	horizontalDil_ = std::make_shared<std::string>(pHorizontalDil);
	dirtyFlag_[10] = true;
}
void Gps::setHorizontalDil(std::string &&pHorizontalDil) noexcept
{
	horizontalDil_ = std::make_shared<std::string>(std::move(pHorizontalDil));
	dirtyFlag_[10] = true;
}
void Gps::setHorizontalDilToNull() noexcept
{
	horizontalDil_.reset();
	dirtyFlag_[10] = true;
}

const std::string &Gps::getValueOfAltitude() const noexcept
{
	static const std::string defaultValue = std::string();
	if (altitude_)
		return *altitude_;
	return defaultValue;
}
const std::shared_ptr<std::string> &Gps::getAltitude() const noexcept
{
	return altitude_;
}
void Gps::setAltitude(const std::string &pAltitude) noexcept
{
	altitude_ = std::make_shared<std::string>(pAltitude);
	dirtyFlag_[11] = true;
}
void Gps::setAltitude(std::string &&pAltitude) noexcept
{
	altitude_ = std::make_shared<std::string>(std::move(pAltitude));
	dirtyFlag_[11] = true;
}
void Gps::setAltitudeToNull() noexcept
{
	altitude_.reset();
	dirtyFlag_[11] = true;
}

const ::trantor::Date &Gps::getValueOfCreateTime() const noexcept
{
	static const ::trantor::Date defaultValue = ::trantor::Date();
	if (createTime_)
		return *createTime_;
	return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Gps::getCreateTime() const noexcept
{
	return createTime_;
}
void Gps::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
	createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
	dirtyFlag_[12] = true;
}
void Gps::setCreateTimeToNull() noexcept
{
	createTime_.reset();
	dirtyFlag_[12] = true;
}

void Gps::updateId(const uint64_t id)
{
	id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &Gps::insertColumns() noexcept
{
	static const std::vector<std::string> inCols = {
		"sj",
		"wgs84_lng",
		"wgs84_lat",
		"gcj02_lng",
		"gcj02_lat",
		"bd09_lng",
		"bd09_lat",
		"gps_qual",
		"num_sats",
		"horizontal_dil",
		"altitude",
		"create_time"};
	return inCols;
}

void Gps::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
	if (dirtyFlag_[1])
	{
		if (getSj())
		{
			binder << getValueOfSj();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[2])
	{
		if (getWgs84Lng())
		{
			binder << getValueOfWgs84Lng();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[3])
	{
		if (getWgs84Lat())
		{
			binder << getValueOfWgs84Lat();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[4])
	{
		if (getGcj02Lng())
		{
			binder << getValueOfGcj02Lng();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[5])
	{
		if (getGcj02Lat())
		{
			binder << getValueOfGcj02Lat();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[6])
	{
		if (getBd09Lng())
		{
			binder << getValueOfBd09Lng();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[7])
	{
		if (getBd09Lat())
		{
			binder << getValueOfBd09Lat();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[8])
	{
		if (getGpsQual())
		{
			binder << getValueOfGpsQual();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[9])
	{
		if (getNumSats())
		{
			binder << getValueOfNumSats();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[10])
	{
		if (getHorizontalDil())
		{
			binder << getValueOfHorizontalDil();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[11])
	{
		if (getAltitude())
		{
			binder << getValueOfAltitude();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[12])
	{
		if (getCreateTime())
		{
			binder << getValueOfCreateTime();
		}
		else
		{
			binder << nullptr;
		}
	}
}

const std::vector<std::string> Gps::updateColumns() const
{
	std::vector<std::string> ret;
	if (dirtyFlag_[1])
	{
		ret.push_back(getColumnName(1));
	}
	if (dirtyFlag_[2])
	{
		ret.push_back(getColumnName(2));
	}
	if (dirtyFlag_[3])
	{
		ret.push_back(getColumnName(3));
	}
	if (dirtyFlag_[4])
	{
		ret.push_back(getColumnName(4));
	}
	if (dirtyFlag_[5])
	{
		ret.push_back(getColumnName(5));
	}
	if (dirtyFlag_[6])
	{
		ret.push_back(getColumnName(6));
	}
	if (dirtyFlag_[7])
	{
		ret.push_back(getColumnName(7));
	}
	if (dirtyFlag_[8])
	{
		ret.push_back(getColumnName(8));
	}
	if (dirtyFlag_[9])
	{
		ret.push_back(getColumnName(9));
	}
	if (dirtyFlag_[10])
	{
		ret.push_back(getColumnName(10));
	}
	if (dirtyFlag_[11])
	{
		ret.push_back(getColumnName(11));
	}
	if (dirtyFlag_[12])
	{
		ret.push_back(getColumnName(12));
	}
	return ret;
}

void Gps::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
	if (dirtyFlag_[1])
	{
		if (getSj())
		{
			binder << getValueOfSj();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[2])
	{
		if (getWgs84Lng())
		{
			binder << getValueOfWgs84Lng();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[3])
	{
		if (getWgs84Lat())
		{
			binder << getValueOfWgs84Lat();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[4])
	{
		if (getGcj02Lng())
		{
			binder << getValueOfGcj02Lng();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[5])
	{
		if (getGcj02Lat())
		{
			binder << getValueOfGcj02Lat();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[6])
	{
		if (getBd09Lng())
		{
			binder << getValueOfBd09Lng();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[7])
	{
		if (getBd09Lat())
		{
			binder << getValueOfBd09Lat();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[8])
	{
		if (getGpsQual())
		{
			binder << getValueOfGpsQual();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[9])
	{
		if (getNumSats())
		{
			binder << getValueOfNumSats();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[10])
	{
		if (getHorizontalDil())
		{
			binder << getValueOfHorizontalDil();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[11])
	{
		if (getAltitude())
		{
			binder << getValueOfAltitude();
		}
		else
		{
			binder << nullptr;
		}
	}
	if (dirtyFlag_[12])
	{
		if (getCreateTime())
		{
			binder << getValueOfCreateTime();
		}
		else
		{
			binder << nullptr;
		}
	}
}
Json::Value Gps::toJson() const
{
	Json::Value ret;
	if (getId())
	{
		ret["id"] = getValueOfId();
	}
	else
	{
		ret["id"] = Json::Value();
	}
	if (getSj())
	{
		ret["sj"] = getValueOfSj();
	}
	else
	{
		ret["sj"] = Json::Value();
	}
	if (getWgs84Lng())
	{
		ret["wgs84_lng"] = getValueOfWgs84Lng();
	}
	else
	{
		ret["wgs84_lng"] = Json::Value();
	}
	if (getWgs84Lat())
	{
		ret["wgs84_lat"] = getValueOfWgs84Lat();
	}
	else
	{
		ret["wgs84_lat"] = Json::Value();
	}
	if (getGcj02Lng())
	{
		ret["gcj02_lng"] = getValueOfGcj02Lng();
	}
	else
	{
		ret["gcj02_lng"] = Json::Value();
	}
	if (getGcj02Lat())
	{
		ret["gcj02_lat"] = getValueOfGcj02Lat();
	}
	else
	{
		ret["gcj02_lat"] = Json::Value();
	}
	if (getBd09Lng())
	{
		ret["bd09_lng"] = getValueOfBd09Lng();
	}
	else
	{
		ret["bd09_lng"] = Json::Value();
	}
	if (getBd09Lat())
	{
		ret["bd09_lat"] = getValueOfBd09Lat();
	}
	else
	{
		ret["bd09_lat"] = Json::Value();
	}
	if (getGpsQual())
	{
		ret["gps_qual"] = getValueOfGpsQual();
	}
	else
	{
		ret["gps_qual"] = Json::Value();
	}
	if (getNumSats())
	{
		ret["num_sats"] = getValueOfNumSats();
	}
	else
	{
		ret["num_sats"] = Json::Value();
	}
	if (getHorizontalDil())
	{
		ret["horizontal_dil"] = getValueOfHorizontalDil();
	}
	else
	{
		ret["horizontal_dil"] = Json::Value();
	}
	if (getAltitude())
	{
		ret["altitude"] = getValueOfAltitude();
	}
	else
	{
		ret["altitude"] = Json::Value();
	}
	if (getCreateTime())
	{
		ret["create_time"] = getCreateTime()->toDbStringLocal();
	}
	else
	{
		ret["create_time"] = Json::Value();
	}
	return ret;
}

Json::Value Gps::toMasqueradedJson(
	const std::vector<std::string> &pMasqueradingVector) const
{
	Json::Value ret;
	if (pMasqueradingVector.size() == 13)
	{
		if (!pMasqueradingVector[0].empty())
		{
			if (getId())
			{
				ret[pMasqueradingVector[0]] = getValueOfId();
			}
			else
			{
				ret[pMasqueradingVector[0]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[1].empty())
		{
			if (getSj())
			{
				ret[pMasqueradingVector[1]] = getValueOfSj();
			}
			else
			{
				ret[pMasqueradingVector[1]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[2].empty())
		{
			if (getWgs84Lng())
			{
				ret[pMasqueradingVector[2]] = getValueOfWgs84Lng();
			}
			else
			{
				ret[pMasqueradingVector[2]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[3].empty())
		{
			if (getWgs84Lat())
			{
				ret[pMasqueradingVector[3]] = getValueOfWgs84Lat();
			}
			else
			{
				ret[pMasqueradingVector[3]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[4].empty())
		{
			if (getGcj02Lng())
			{
				ret[pMasqueradingVector[4]] = getValueOfGcj02Lng();
			}
			else
			{
				ret[pMasqueradingVector[4]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[5].empty())
		{
			if (getGcj02Lat())
			{
				ret[pMasqueradingVector[5]] = getValueOfGcj02Lat();
			}
			else
			{
				ret[pMasqueradingVector[5]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[6].empty())
		{
			if (getBd09Lng())
			{
				ret[pMasqueradingVector[6]] = getValueOfBd09Lng();
			}
			else
			{
				ret[pMasqueradingVector[6]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[7].empty())
		{
			if (getBd09Lat())
			{
				ret[pMasqueradingVector[7]] = getValueOfBd09Lat();
			}
			else
			{
				ret[pMasqueradingVector[7]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[8].empty())
		{
			if (getGpsQual())
			{
				ret[pMasqueradingVector[8]] = getValueOfGpsQual();
			}
			else
			{
				ret[pMasqueradingVector[8]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[9].empty())
		{
			if (getNumSats())
			{
				ret[pMasqueradingVector[9]] = getValueOfNumSats();
			}
			else
			{
				ret[pMasqueradingVector[9]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[10].empty())
		{
			if (getHorizontalDil())
			{
				ret[pMasqueradingVector[10]] = getValueOfHorizontalDil();
			}
			else
			{
				ret[pMasqueradingVector[10]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[11].empty())
		{
			if (getAltitude())
			{
				ret[pMasqueradingVector[11]] = getValueOfAltitude();
			}
			else
			{
				ret[pMasqueradingVector[11]] = Json::Value();
			}
		}
		if (!pMasqueradingVector[12].empty())
		{
			if (getCreateTime())
			{
				ret[pMasqueradingVector[12]] = getCreateTime()->toDbStringLocal();
			}
			else
			{
				ret[pMasqueradingVector[12]] = Json::Value();
			}
		}
		return ret;
	}
	LOG_ERROR << "Masquerade failed";
	if (getId())
	{
		ret["id"] = getValueOfId();
	}
	else
	{
		ret["id"] = Json::Value();
	}
	if (getSj())
	{
		ret["sj"] = getValueOfSj();
	}
	else
	{
		ret["sj"] = Json::Value();
	}
	if (getWgs84Lng())
	{
		ret["wgs84_lng"] = getValueOfWgs84Lng();
	}
	else
	{
		ret["wgs84_lng"] = Json::Value();
	}
	if (getWgs84Lat())
	{
		ret["wgs84_lat"] = getValueOfWgs84Lat();
	}
	else
	{
		ret["wgs84_lat"] = Json::Value();
	}
	if (getGcj02Lng())
	{
		ret["gcj02_lng"] = getValueOfGcj02Lng();
	}
	else
	{
		ret["gcj02_lng"] = Json::Value();
	}
	if (getGcj02Lat())
	{
		ret["gcj02_lat"] = getValueOfGcj02Lat();
	}
	else
	{
		ret["gcj02_lat"] = Json::Value();
	}
	if (getBd09Lng())
	{
		ret["bd09_lng"] = getValueOfBd09Lng();
	}
	else
	{
		ret["bd09_lng"] = Json::Value();
	}
	if (getBd09Lat())
	{
		ret["bd09_lat"] = getValueOfBd09Lat();
	}
	else
	{
		ret["bd09_lat"] = Json::Value();
	}
	if (getGpsQual())
	{
		ret["gps_qual"] = getValueOfGpsQual();
	}
	else
	{
		ret["gps_qual"] = Json::Value();
	}
	if (getNumSats())
	{
		ret["num_sats"] = getValueOfNumSats();
	}
	else
	{
		ret["num_sats"] = Json::Value();
	}
	if (getHorizontalDil())
	{
		ret["horizontal_dil"] = getValueOfHorizontalDil();
	}
	else
	{
		ret["horizontal_dil"] = Json::Value();
	}
	if (getAltitude())
	{
		ret["altitude"] = getValueOfAltitude();
	}
	else
	{
		ret["altitude"] = Json::Value();
	}
	if (getCreateTime())
	{
		ret["create_time"] = getCreateTime()->toDbStringLocal();
	}
	else
	{
		ret["create_time"] = Json::Value();
	}
	return ret;
}

bool Gps::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
	if (pJson.isMember("id"))
	{
		if (!validJsonOfField(0, "id", pJson["id"], err, true))
			return false;
	}
	if (pJson.isMember("sj"))
	{
		if (!validJsonOfField(1, "sj", pJson["sj"], err, true))
			return false;
	}
	if (pJson.isMember("wgs84_lng"))
	{
		if (!validJsonOfField(2, "wgs84_lng", pJson["wgs84_lng"], err, true))
			return false;
	}
	if (pJson.isMember("wgs84_lat"))
	{
		if (!validJsonOfField(3, "wgs84_lat", pJson["wgs84_lat"], err, true))
			return false;
	}
	if (pJson.isMember("gcj02_lng"))
	{
		if (!validJsonOfField(4, "gcj02_lng", pJson["gcj02_lng"], err, true))
			return false;
	}
	if (pJson.isMember("gcj02_lat"))
	{
		if (!validJsonOfField(5, "gcj02_lat", pJson["gcj02_lat"], err, true))
			return false;
	}
	if (pJson.isMember("bd09_lng"))
	{
		if (!validJsonOfField(6, "bd09_lng", pJson["bd09_lng"], err, true))
			return false;
	}
	if (pJson.isMember("bd09_lat"))
	{
		if (!validJsonOfField(7, "bd09_lat", pJson["bd09_lat"], err, true))
			return false;
	}
	if (pJson.isMember("gps_qual"))
	{
		if (!validJsonOfField(8, "gps_qual", pJson["gps_qual"], err, true))
			return false;
	}
	if (pJson.isMember("num_sats"))
	{
		if (!validJsonOfField(9, "num_sats", pJson["num_sats"], err, true))
			return false;
	}
	if (pJson.isMember("horizontal_dil"))
	{
		if (!validJsonOfField(10, "horizontal_dil", pJson["horizontal_dil"], err, true))
			return false;
	}
	if (pJson.isMember("altitude"))
	{
		if (!validJsonOfField(11, "altitude", pJson["altitude"], err, true))
			return false;
	}
	if (pJson.isMember("create_time"))
	{
		if (!validJsonOfField(12, "create_time", pJson["create_time"], err, true))
			return false;
	}
	return true;
}
bool Gps::validateMasqueradedJsonForCreation(const Json::Value &pJson,
											 const std::vector<std::string> &pMasqueradingVector,
											 std::string &err)
{
	if (pMasqueradingVector.size() != 13)
	{
		err = "Bad masquerading vector";
		return false;
	}
	try
	{
		if (!pMasqueradingVector[0].empty())
		{
			if (pJson.isMember(pMasqueradingVector[0]))
			{
				if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[1].empty())
		{
			if (pJson.isMember(pMasqueradingVector[1]))
			{
				if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[2].empty())
		{
			if (pJson.isMember(pMasqueradingVector[2]))
			{
				if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[3].empty())
		{
			if (pJson.isMember(pMasqueradingVector[3]))
			{
				if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[4].empty())
		{
			if (pJson.isMember(pMasqueradingVector[4]))
			{
				if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[5].empty())
		{
			if (pJson.isMember(pMasqueradingVector[5]))
			{
				if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[6].empty())
		{
			if (pJson.isMember(pMasqueradingVector[6]))
			{
				if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[7].empty())
		{
			if (pJson.isMember(pMasqueradingVector[7]))
			{
				if (!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[8].empty())
		{
			if (pJson.isMember(pMasqueradingVector[8]))
			{
				if (!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[9].empty())
		{
			if (pJson.isMember(pMasqueradingVector[9]))
			{
				if (!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[10].empty())
		{
			if (pJson.isMember(pMasqueradingVector[10]))
			{
				if (!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[11].empty())
		{
			if (pJson.isMember(pMasqueradingVector[11]))
			{
				if (!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
					return false;
			}
		}
		if (!pMasqueradingVector[12].empty())
		{
			if (pJson.isMember(pMasqueradingVector[12]))
			{
				if (!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
					return false;
			}
		}
	}
	catch (const Json::LogicError &e)
	{
		err = e.what();
		return false;
	}
	return true;
}
bool Gps::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
	if (pJson.isMember("id"))
	{
		if (!validJsonOfField(0, "id", pJson["id"], err, false))
			return false;
	}
	else
	{
		err = "The value of primary key must be set in the json object for update";
		return false;
	}
	if (pJson.isMember("sj"))
	{
		if (!validJsonOfField(1, "sj", pJson["sj"], err, false))
			return false;
	}
	if (pJson.isMember("wgs84_lng"))
	{
		if (!validJsonOfField(2, "wgs84_lng", pJson["wgs84_lng"], err, false))
			return false;
	}
	if (pJson.isMember("wgs84_lat"))
	{
		if (!validJsonOfField(3, "wgs84_lat", pJson["wgs84_lat"], err, false))
			return false;
	}
	if (pJson.isMember("gcj02_lng"))
	{
		if (!validJsonOfField(4, "gcj02_lng", pJson["gcj02_lng"], err, false))
			return false;
	}
	if (pJson.isMember("gcj02_lat"))
	{
		if (!validJsonOfField(5, "gcj02_lat", pJson["gcj02_lat"], err, false))
			return false;
	}
	if (pJson.isMember("bd09_lng"))
	{
		if (!validJsonOfField(6, "bd09_lng", pJson["bd09_lng"], err, false))
			return false;
	}
	if (pJson.isMember("bd09_lat"))
	{
		if (!validJsonOfField(7, "bd09_lat", pJson["bd09_lat"], err, false))
			return false;
	}
	if (pJson.isMember("gps_qual"))
	{
		if (!validJsonOfField(8, "gps_qual", pJson["gps_qual"], err, false))
			return false;
	}
	if (pJson.isMember("num_sats"))
	{
		if (!validJsonOfField(9, "num_sats", pJson["num_sats"], err, false))
			return false;
	}
	if (pJson.isMember("horizontal_dil"))
	{
		if (!validJsonOfField(10, "horizontal_dil", pJson["horizontal_dil"], err, false))
			return false;
	}
	if (pJson.isMember("altitude"))
	{
		if (!validJsonOfField(11, "altitude", pJson["altitude"], err, false))
			return false;
	}
	if (pJson.isMember("create_time"))
	{
		if (!validJsonOfField(12, "create_time", pJson["create_time"], err, false))
			return false;
	}
	return true;
}
bool Gps::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
										   const std::vector<std::string> &pMasqueradingVector,
										   std::string &err)
{
	if (pMasqueradingVector.size() != 13)
	{
		err = "Bad masquerading vector";
		return false;
	}
	try
	{
		if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
		{
			if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
				return false;
		}
		else
		{
			err = "The value of primary key must be set in the json object for update";
			return false;
		}
		if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
		{
			if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
				return false;
		}
		if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
		{
			if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
				return false;
		}
		if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
		{
			if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
				return false;
		}
		if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
		{
			if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
				return false;
		}
		if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
		{
			if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
				return false;
		}
		if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
		{
			if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
				return false;
		}
		if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
		{
			if (!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
				return false;
		}
		if (!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
		{
			if (!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
				return false;
		}
		if (!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
		{
			if (!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
				return false;
		}
		if (!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
		{
			if (!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
				return false;
		}
		if (!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
		{
			if (!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
				return false;
		}
		if (!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
		{
			if (!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
				return false;
		}
	}
	catch (const Json::LogicError &e)
	{
		err = e.what();
		return false;
	}
	return true;
}
bool Gps::validJsonOfField(size_t index,
						   const std::string &fieldName,
						   const Json::Value &pJson,
						   std::string &err,
						   bool isForCreation)
{
	switch (index)
	{
	case 0:
		if (pJson.isNull())
		{
			err = "The " + fieldName + " column cannot be null";
			return false;
		}
		if (isForCreation)
		{
			err = "The automatic primary key cannot be set";
			return false;
		}
		if (!pJson.isInt())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	case 1:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isString())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		// asString().length() creates a string object, is there any better way to validate the length?
		if (pJson.isString() && pJson.asString().length() > 50)
		{
			err = "String length exceeds limit for the " +
				  fieldName +
				  " field (the maximum value is 50)";
			return false;
		}

		break;
	case 2:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isString())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		// asString().length() creates a string object, is there any better way to validate the length?
		if (pJson.isString() && pJson.asString().length() > 30)
		{
			err = "String length exceeds limit for the " +
				  fieldName +
				  " field (the maximum value is 30)";
			return false;
		}

		break;
	case 3:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isString())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		// asString().length() creates a string object, is there any better way to validate the length?
		if (pJson.isString() && pJson.asString().length() > 30)
		{
			err = "String length exceeds limit for the " +
				  fieldName +
				  " field (the maximum value is 30)";
			return false;
		}

		break;
	case 4:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isString())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		// asString().length() creates a string object, is there any better way to validate the length?
		if (pJson.isString() && pJson.asString().length() > 30)
		{
			err = "String length exceeds limit for the " +
				  fieldName +
				  " field (the maximum value is 30)";
			return false;
		}

		break;
	case 5:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isString())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		// asString().length() creates a string object, is there any better way to validate the length?
		if (pJson.isString() && pJson.asString().length() > 30)
		{
			err = "String length exceeds limit for the " +
				  fieldName +
				  " field (the maximum value is 30)";
			return false;
		}

		break;
	case 6:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isString())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		// asString().length() creates a string object, is there any better way to validate the length?
		if (pJson.isString() && pJson.asString().length() > 30)
		{
			err = "String length exceeds limit for the " +
				  fieldName +
				  " field (the maximum value is 30)";
			return false;
		}

		break;
	case 7:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isString())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		// asString().length() creates a string object, is there any better way to validate the length?
		if (pJson.isString() && pJson.asString().length() > 30)
		{
			err = "String length exceeds limit for the " +
				  fieldName +
				  " field (the maximum value is 30)";
			return false;
		}

		break;
	case 8:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isString())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		// asString().length() creates a string object, is there any better way to validate the length?
		if (pJson.isString() && pJson.asString().length() > 30)
		{
			err = "String length exceeds limit for the " +
				  fieldName +
				  " field (the maximum value is 30)";
			return false;
		}

		break;
	case 9:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isString())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		// asString().length() creates a string object, is there any better way to validate the length?
		if (pJson.isString() && pJson.asString().length() > 30)
		{
			err = "String length exceeds limit for the " +
				  fieldName +
				  " field (the maximum value is 30)";
			return false;
		}

		break;
	case 10:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isString())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		// asString().length() creates a string object, is there any better way to validate the length?
		if (pJson.isString() && pJson.asString().length() > 30)
		{
			err = "String length exceeds limit for the " +
				  fieldName +
				  " field (the maximum value is 30)";
			return false;
		}

		break;
	case 11:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isString())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		// asString().length() creates a string object, is there any better way to validate the length?
		if (pJson.isString() && pJson.asString().length() > 30)
		{
			err = "String length exceeds limit for the " +
				  fieldName +
				  " field (the maximum value is 30)";
			return false;
		}

		break;
	case 12:
		if (pJson.isNull())
		{
			return true;
		}
		if (!pJson.isString())
		{
			err = "Type error in the " + fieldName + " field";
			return false;
		}
		break;
	default:
		err = "Internal error in the server";
		return false;
	}
	return true;
}
